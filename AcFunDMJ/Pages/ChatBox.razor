@page "/{UserId}"
@implements IDisposable
@inject IJSRuntime JSRuntime
@using AcFunDanmu;
@using AcFunDanmu.Enums;
@using System.Timers;
@using Google.Protobuf; 

@switch (CurrentStatus)
{
    case Status.Initializing:
        <p>启动中</p>
        break;
    case Status.Stopped:
    case Status.Running:
        <div class="gifts">
            @foreach (var gift in Gifts.Values)
            {
                <p @key="gift.ComboId" class="gift">@gift.Detail.Name × @gift.Count</p>
            }
        </div>
        <div class="danmaku" @ref="danmaku">
            @foreach (var dm in Danmakus)
            {
                switch (dm)
                {
                    case Comment comment:
                        <p class="comment"><span class="name">@comment.Name</span>: @comment.Content</p>
                        break;
                    case Like like:
                        <p class="like"><span class="name">@like.Name</span>点赞了 💖</p>
                        break;
                    case Follow follow:
                        <p class="follow"><span class="name">@follow.Name</span>关注了你</p>
                        break;
                    case Enter enter:
                        <p class="enter"><span class="name">@enter.Name</span>进入直播间</p>
                        break;
                    case Banana banana:
                        @*<p class="gift"><span class="name">@banana.Name</span>送出 @banana.Count 个香蕉🍌</p>*@
                        break;
                    case Gift gift:
                        <p class="gift"><span class="name">@gift.Name</span>送出 @gift.Detail.Name<img class="icon" src="@gift.Detail.Pic"/></p>
                        break;
                }
            }
            @if (CurrentStatus == Status.Stopped)
            {
                <p class="stopped">已停止</p>
            }
        </div>
        break;
}

@code {
    [Parameter]
    public string UserId { get; set; }

    private bool IsInitialized { get; set; }
    private bool ShowLike { get; set; }
    private bool ShowFollow { get; set; }
    private bool ShowGift { get; set; }

    private string Visotors { get; set; }
    private string Likes { get; set; }
    private string Bananas { get; set; }

    private Status CurrentStatus { get; set; } = Status.Initializing;

    enum Status { Initializing, Running, Stopped }

    private Client _client = null;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Initialize();
    }

    public async void Dispose()
    {
        await _client.Stop("disconnect");
    }



    private async void Initialize()
    {
        _client = new AcFunDanmu.Client();
        _client.Handler += HandleSignal;
        await _client.Initialize(UserId);
        await InvokeAsync(() =>
        {
            CurrentStatus = Status.Running;
            StateHasChanged();
        });
        await _client.Start();
        await InvokeAsync(() =>
        {
            CurrentStatus = Status.Stopped;
            StateHasChanged();
        });

        foreach (var timer in GiftTimers.Values)
        {
            timer.Stop();
        }
        GiftTimers.Clear();
        Gifts.Clear();
        Danmakus.Clear();
        GC.Collect();
    }

    ElementReference danmaku;

    struct Comment
    {
        public string Name { get; set; }
        public string Content { get; set; }
    }
    struct Like { public string Name { get; set; } }
    struct Enter { public string Name { get; set; } }
    struct Follow { public string Name { get; set; } }
    struct Banana
    {
        public string Name { get; set; }
        public int Count { get; set; }
    }
    struct Gift
    {
        public string Name { get; set; }
        public string ComboId { get; set; }
        public int Count { get; set; }
        public AcFunDanmu.Models.Client.GiftInfo Detail { get; set; }
    }

    private IList<object> Danmakus = new List<object>();
    private Dictionary<string, Gift> Gifts = new Dictionary<string, Gift>();
    private Dictionary<string, Timer> GiftTimers = new Dictionary<string, Timer>();

    private async void UpdateDanmaku(object obj)
    {
        await InvokeAsync(async () =>
        {
            Danmakus.Add(obj);
            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("scrollToEnd", danmaku);
        });
    }

    private async void UpdateGifts(Gift gift)
    {
        await InvokeAsync(async () =>
        {
            if (!Danmakus.Any(obj => obj is Gift && ((Gift)obj).ComboId == gift.ComboId))
            {
                Danmakus.Add(gift);
            }

            if (Gifts.ContainsKey(gift.ComboId))
            {
                GiftTimers[gift.ComboId].Stop();
            }
            else
            {
                GiftTimers[gift.ComboId] = new Timer(10000);
                GiftTimers[gift.ComboId].Elapsed += (s, e) =>
                {
                    InvokeAsync(() =>
                    {
                        Gifts.Remove(gift.ComboId);
                        GiftTimers.Remove(gift.ComboId);
                        StateHasChanged();
                    });
                };
            }
            Gifts[gift.ComboId] = gift;
            GiftTimers[gift.ComboId].Start();

            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("scrollToEnd", danmaku);
        });
    }

    private void HandleSignal(Client sender, string messagetType, ByteString payload)
    {
        switch (messagetType)
        {
            // Includes comment, gift, enter room, like, follower
            case PushMessage.ACTION_SIGNAL:
                var actionSignal = ZtLiveScActionSignal.Parser.ParseFrom(payload);

                foreach (var item in actionSignal.Item)
                {
                    switch (item.SignalType)
                    {
                        case PushMessage.ActionSignal.COMMENT:
                            foreach (var pl in item.Payload)
                            {
                                var comment = CommonActionSignalComment.Parser.ParseFrom(pl);
                                UpdateDanmaku(new Comment { Name = comment.UserInfo.Nickname, Content = comment.Content });
                            }
                            break;
                        case PushMessage.ActionSignal.LIKE:
                            foreach (var pl in item.Payload)
                            {
                                var like = CommonActionSignalLike.Parser.ParseFrom(pl);
                                UpdateDanmaku(new Like { Name = like.UserInfo.Nickname });
                            }
                            break;
                        case PushMessage.ActionSignal.ENTER_ROOM:
                            foreach (var pl in item.Payload)
                            {
                                var enter = CommonActionSignalUserEnterRoom.Parser.ParseFrom(pl);
                                UpdateDanmaku(new Enter { Name = enter.UserInfo.Nickname });
                            }
                            break;
                        case PushMessage.ActionSignal.FOLLOW:
                            foreach (var pl in item.Payload)
                            {
                                var follower = CommonActionSignalUserFollowAuthor.Parser.ParseFrom(pl);
                                UpdateDanmaku(new Follow { Name = follower.UserInfo.Nickname });
                            }
                            break;
                        case PushMessage.ActionSignal.THROW_BANANA:
                            //foreach (var pl in item.Payload)
                            //{
                            //    var banana = AcfunActionSignalThrowBanana.Parser.ParseFrom(pl);
                            //    UpdateDanmaku(new Banana { Name = banana.Visitor.Name, Count = banana.Count });
                            //}
                            break;
                        case PushMessage.ActionSignal.GIFT:
                            foreach (var pl in item.Payload)
                            {
                                var gift = CommonActionSignalGift.Parser.ParseFrom(pl);
                                var sGift = new Gift { Name = gift.UserInfo.Nickname, ComboId = gift.ComboKey, Count = gift.BatchSize, Detail = Client.Gifts[gift.GiftId] };
                                UpdateGifts(sGift);
                            }
                            break;
                        default:
                            break;
                    }
                }
                break;
            //Includes current banana counts, watching count, like count and top 3 users sent gifts
            case PushMessage.STATE_SIGNAL:
                ZtLiveScStateSignal signal = ZtLiveScStateSignal.Parser.ParseFrom(payload);

                foreach (var item in signal.Item)
                {
                    switch (item.SignalType)
                    {
                        case PushMessage.StateSignal.ACFUN_DISPLAY_INFO:
                            //var acInfo = AcfunStateSignalDisplayInfo.Parser.ParseFrom(item.Payload);
                            //Console.WriteLine("Current banada count: {0}", acInfo.BananaCount);
                            break;
                        case PushMessage.StateSignal.DISPLAY_INFO:
                            //var stateInfo = CommonStateSignalDisplayInfo.Parser.ParseFrom(item.Payload);
                            //Console.WriteLine("{0} watching, {1} likes", stateInfo.WatchingCount, stateInfo.LikeCount);
                            break;
                        case PushMessage.StateSignal.TOP_USRES:
                            //var users = CommonStateSignalTopUsers.Parser.ParseFrom(item.Payload);
                            //Console.WriteLine("Top 3 users: {0}", string.Join(", ", users.User.Select(user => user.Detail.Name)));
                            break;
                        case PushMessage.StateSignal.RECENT_COMMENT:
                            var comments = CommonStateSignalRecentComment.Parser.ParseFrom(item.Payload);
                            foreach (var comment in comments.Comment)
                            {
                                UpdateDanmaku(comment);
                            }
                            break;
                        default:
                            //                            var pi = Parse(item.SignalType, item.Payload);
                            //#if DEBUG
                            //                            Console.WriteLine("Unhandled state type: {0}, content: {1}", item.SignalType, pi);
                            //#endif
                            break;
                    }
                }
                break;
        }
    }
}
