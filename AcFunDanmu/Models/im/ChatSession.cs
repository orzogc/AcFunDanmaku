// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ChatSession.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AcFunDanmu.Im.Message {

  /// <summary>Holder for reflection information generated from ChatSession.proto</summary>
  public static partial class ChatSessionReflection {

    #region Descriptor
    /// <summary>File descriptor for ChatSession.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChatSessionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFDaGF0U2Vzc2lvbi5wcm90bxIVQWNGdW5EYW5tdS5JbS5NZXNzYWdlGhRD",
            "aGF0VGFyZ2V0VHlwZS5wcm90bxoNTWVzc2FnZS5wcm90bxoaTWVzc2FnZVJl",
            "Y2VpdmVTdGF0dXMucHJvdG8aEFJlbWluZEJvZHkucHJvdG8aE1Nlc3Npb25T",
            "dGF0dXMucHJvdG8aClVzZXIucHJvdG8i0AUKC0NoYXRTZXNzaW9uEikKBnRh",
            "cmdldBgBIAEoCzIZLkFjRnVuRGFubXUuSW0uQmFzaWMuVXNlchIQCghtYXhT",
            "ZXFJZBgCIAEoAxIRCglyZWFkU2VxSWQYAyABKAMSFgoOdW5yZWFkTXNnQ291",
            "bnQYBCABKAUSNQoNbGF0ZXN0TWVzc2FnZRgFIAMoCzIeLkFjRnVuRGFubXUu",
            "SW0uTWVzc2FnZS5NZXNzYWdlEj0KDmNoYXRUYXJnZXRUeXBlGAggASgOMiUu",
            "QWNGdW5EYW5tdS5JbS5NZXNzYWdlLkNoYXRUYXJnZXRUeXBlEhAKCHRhcmdl",
            "dElkGAkgASgDEhIKCmFjdGl2ZVRpbWUYCiABKAMSEAoIcHJpb3JpdHkYCyAB",
            "KAUSEgoKY2F0ZWdvcnlJZBgMIAEoBRIOCgZjdXJzb3IYDSABKAkSEwoLYWNj",
            "b3VudFR5cGUYDiABKAUSGAoQYWdncmVnYXRlU2Vzc2lvbhgPIAEoCBIWCg5q",
            "dW1wQ2F0ZWdvcnlJZBgQIAEoBRIQCghleHBpcmVBdBgRIAEoAxIVCg1lZmZl",
            "Y3RpdmVGcm9tGBIgASgDEhMKC3N0clRhcmdldElkGBMgASgJEjUKCnJlbWlu",
            "ZEJvZHkYFCADKAsyIS5BY0Z1bkRhbm11LkltLk1lc3NhZ2UuUmVtaW5kQm9k",
            "eRIXCg90YXJnZXRSZWFkU2VxSWQYFSABKAMSDAoEbXV0ZRgWIAEoCBI0CgZz",
            "dGF0dXMYFyABKA4yJC5BY0Z1bkRhbm11LkltLk1lc3NhZ2UuU2Vzc2lvblN0",
            "YXR1cxJJChRtZXNzYWdlUmVjZWl2ZVN0YXR1cxgYIAEoDjIrLkFjRnVuRGFu",
            "bXUuSW0uTWVzc2FnZS5NZXNzYWdlUmVjZWl2ZVN0YXR1cxINCgVleHRyYRgZ",
            "IAEoDBIUCgxtYXJrZWRVbnJlYWQYGiABKAhiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AcFunDanmu.Im.Message.ChatTargetTypeReflection.Descriptor, global::AcFunDanmu.Im.Message.MessageReflection.Descriptor, global::AcFunDanmu.Im.Message.MessageReceiveStatusReflection.Descriptor, global::AcFunDanmu.Im.Message.RemindBodyReflection.Descriptor, global::AcFunDanmu.Im.Message.SessionStatusReflection.Descriptor, global::AcFunDanmu.Im.Basic.UserReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.Im.Message.ChatSession), global::AcFunDanmu.Im.Message.ChatSession.Parser, new[]{ "Target", "MaxSeqId", "ReadSeqId", "UnreadMsgCount", "LatestMessage", "ChatTargetType", "TargetId", "ActiveTime", "Priority", "CategoryId", "Cursor", "AccountType", "AggregateSession", "JumpCategoryId", "ExpireAt", "EffectiveFrom", "StrTargetId", "RemindBody", "TargetReadSeqId", "Mute", "Status", "MessageReceiveStatus", "Extra", "MarkedUnread" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ChatSession : pb::IMessage<ChatSession>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChatSession> _parser = new pb::MessageParser<ChatSession>(() => new ChatSession());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ChatSession> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.Im.Message.ChatSessionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ChatSession() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ChatSession(ChatSession other) : this() {
      target_ = other.target_ != null ? other.target_.Clone() : null;
      maxSeqId_ = other.maxSeqId_;
      readSeqId_ = other.readSeqId_;
      unreadMsgCount_ = other.unreadMsgCount_;
      latestMessage_ = other.latestMessage_.Clone();
      chatTargetType_ = other.chatTargetType_;
      targetId_ = other.targetId_;
      activeTime_ = other.activeTime_;
      priority_ = other.priority_;
      categoryId_ = other.categoryId_;
      cursor_ = other.cursor_;
      accountType_ = other.accountType_;
      aggregateSession_ = other.aggregateSession_;
      jumpCategoryId_ = other.jumpCategoryId_;
      expireAt_ = other.expireAt_;
      effectiveFrom_ = other.effectiveFrom_;
      strTargetId_ = other.strTargetId_;
      remindBody_ = other.remindBody_.Clone();
      targetReadSeqId_ = other.targetReadSeqId_;
      mute_ = other.mute_;
      status_ = other.status_;
      messageReceiveStatus_ = other.messageReceiveStatus_;
      extra_ = other.extra_;
      markedUnread_ = other.markedUnread_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ChatSession Clone() {
      return new ChatSession(this);
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    private global::AcFunDanmu.Im.Basic.User target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::AcFunDanmu.Im.Basic.User Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "maxSeqId" field.</summary>
    public const int MaxSeqIdFieldNumber = 2;
    private long maxSeqId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long MaxSeqId {
      get { return maxSeqId_; }
      set {
        maxSeqId_ = value;
      }
    }

    /// <summary>Field number for the "readSeqId" field.</summary>
    public const int ReadSeqIdFieldNumber = 3;
    private long readSeqId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ReadSeqId {
      get { return readSeqId_; }
      set {
        readSeqId_ = value;
      }
    }

    /// <summary>Field number for the "unreadMsgCount" field.</summary>
    public const int UnreadMsgCountFieldNumber = 4;
    private int unreadMsgCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnreadMsgCount {
      get { return unreadMsgCount_; }
      set {
        unreadMsgCount_ = value;
      }
    }

    /// <summary>Field number for the "latestMessage" field.</summary>
    public const int LatestMessageFieldNumber = 5;
    private static readonly pb::FieldCodec<global::AcFunDanmu.Im.Message.Message> _repeated_latestMessage_codec
        = pb::FieldCodec.ForMessage(42, global::AcFunDanmu.Im.Message.Message.Parser);
    private readonly pbc::RepeatedField<global::AcFunDanmu.Im.Message.Message> latestMessage_ = new pbc::RepeatedField<global::AcFunDanmu.Im.Message.Message>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::AcFunDanmu.Im.Message.Message> LatestMessage {
      get { return latestMessage_; }
    }

    /// <summary>Field number for the "chatTargetType" field.</summary>
    public const int ChatTargetTypeFieldNumber = 8;
    private global::AcFunDanmu.Im.Message.ChatTargetType chatTargetType_ = global::AcFunDanmu.Im.Message.ChatTargetType.CttUser;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::AcFunDanmu.Im.Message.ChatTargetType ChatTargetType {
      get { return chatTargetType_; }
      set {
        chatTargetType_ = value;
      }
    }

    /// <summary>Field number for the "targetId" field.</summary>
    public const int TargetIdFieldNumber = 9;
    private long targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "activeTime" field.</summary>
    public const int ActiveTimeFieldNumber = 10;
    private long activeTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ActiveTime {
      get { return activeTime_; }
      set {
        activeTime_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 11;
    private int priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "categoryId" field.</summary>
    public const int CategoryIdFieldNumber = 12;
    private int categoryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CategoryId {
      get { return categoryId_; }
      set {
        categoryId_ = value;
      }
    }

    /// <summary>Field number for the "cursor" field.</summary>
    public const int CursorFieldNumber = 13;
    private string cursor_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Cursor {
      get { return cursor_; }
      set {
        cursor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accountType" field.</summary>
    public const int AccountTypeFieldNumber = 14;
    private int accountType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AccountType {
      get { return accountType_; }
      set {
        accountType_ = value;
      }
    }

    /// <summary>Field number for the "aggregateSession" field.</summary>
    public const int AggregateSessionFieldNumber = 15;
    private bool aggregateSession_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AggregateSession {
      get { return aggregateSession_; }
      set {
        aggregateSession_ = value;
      }
    }

    /// <summary>Field number for the "jumpCategoryId" field.</summary>
    public const int JumpCategoryIdFieldNumber = 16;
    private int jumpCategoryId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JumpCategoryId {
      get { return jumpCategoryId_; }
      set {
        jumpCategoryId_ = value;
      }
    }

    /// <summary>Field number for the "expireAt" field.</summary>
    public const int ExpireAtFieldNumber = 17;
    private long expireAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ExpireAt {
      get { return expireAt_; }
      set {
        expireAt_ = value;
      }
    }

    /// <summary>Field number for the "effectiveFrom" field.</summary>
    public const int EffectiveFromFieldNumber = 18;
    private long effectiveFrom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EffectiveFrom {
      get { return effectiveFrom_; }
      set {
        effectiveFrom_ = value;
      }
    }

    /// <summary>Field number for the "strTargetId" field.</summary>
    public const int StrTargetIdFieldNumber = 19;
    private string strTargetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StrTargetId {
      get { return strTargetId_; }
      set {
        strTargetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remindBody" field.</summary>
    public const int RemindBodyFieldNumber = 20;
    private static readonly pb::FieldCodec<global::AcFunDanmu.Im.Message.RemindBody> _repeated_remindBody_codec
        = pb::FieldCodec.ForMessage(162, global::AcFunDanmu.Im.Message.RemindBody.Parser);
    private readonly pbc::RepeatedField<global::AcFunDanmu.Im.Message.RemindBody> remindBody_ = new pbc::RepeatedField<global::AcFunDanmu.Im.Message.RemindBody>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::AcFunDanmu.Im.Message.RemindBody> RemindBody {
      get { return remindBody_; }
    }

    /// <summary>Field number for the "targetReadSeqId" field.</summary>
    public const int TargetReadSeqIdFieldNumber = 21;
    private long targetReadSeqId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TargetReadSeqId {
      get { return targetReadSeqId_; }
      set {
        targetReadSeqId_ = value;
      }
    }

    /// <summary>Field number for the "mute" field.</summary>
    public const int MuteFieldNumber = 22;
    private bool mute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Mute {
      get { return mute_; }
      set {
        mute_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 23;
    private global::AcFunDanmu.Im.Message.SessionStatus status_ = global::AcFunDanmu.Im.Message.SessionStatus.SessionValid;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::AcFunDanmu.Im.Message.SessionStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "messageReceiveStatus" field.</summary>
    public const int MessageReceiveStatusFieldNumber = 24;
    private global::AcFunDanmu.Im.Message.MessageReceiveStatus messageReceiveStatus_ = global::AcFunDanmu.Im.Message.MessageReceiveStatus.ReceiveMsg;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::AcFunDanmu.Im.Message.MessageReceiveStatus MessageReceiveStatus {
      get { return messageReceiveStatus_; }
      set {
        messageReceiveStatus_ = value;
      }
    }

    /// <summary>Field number for the "extra" field.</summary>
    public const int ExtraFieldNumber = 25;
    private pb::ByteString extra_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Extra {
      get { return extra_; }
      set {
        extra_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "markedUnread" field.</summary>
    public const int MarkedUnreadFieldNumber = 26;
    private bool markedUnread_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MarkedUnread {
      get { return markedUnread_; }
      set {
        markedUnread_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ChatSession);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ChatSession other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Target, other.Target)) return false;
      if (MaxSeqId != other.MaxSeqId) return false;
      if (ReadSeqId != other.ReadSeqId) return false;
      if (UnreadMsgCount != other.UnreadMsgCount) return false;
      if(!latestMessage_.Equals(other.latestMessage_)) return false;
      if (ChatTargetType != other.ChatTargetType) return false;
      if (TargetId != other.TargetId) return false;
      if (ActiveTime != other.ActiveTime) return false;
      if (Priority != other.Priority) return false;
      if (CategoryId != other.CategoryId) return false;
      if (Cursor != other.Cursor) return false;
      if (AccountType != other.AccountType) return false;
      if (AggregateSession != other.AggregateSession) return false;
      if (JumpCategoryId != other.JumpCategoryId) return false;
      if (ExpireAt != other.ExpireAt) return false;
      if (EffectiveFrom != other.EffectiveFrom) return false;
      if (StrTargetId != other.StrTargetId) return false;
      if(!remindBody_.Equals(other.remindBody_)) return false;
      if (TargetReadSeqId != other.TargetReadSeqId) return false;
      if (Mute != other.Mute) return false;
      if (Status != other.Status) return false;
      if (MessageReceiveStatus != other.MessageReceiveStatus) return false;
      if (Extra != other.Extra) return false;
      if (MarkedUnread != other.MarkedUnread) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (target_ != null) hash ^= Target.GetHashCode();
      if (MaxSeqId != 0L) hash ^= MaxSeqId.GetHashCode();
      if (ReadSeqId != 0L) hash ^= ReadSeqId.GetHashCode();
      if (UnreadMsgCount != 0) hash ^= UnreadMsgCount.GetHashCode();
      hash ^= latestMessage_.GetHashCode();
      if (ChatTargetType != global::AcFunDanmu.Im.Message.ChatTargetType.CttUser) hash ^= ChatTargetType.GetHashCode();
      if (TargetId != 0L) hash ^= TargetId.GetHashCode();
      if (ActiveTime != 0L) hash ^= ActiveTime.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (CategoryId != 0) hash ^= CategoryId.GetHashCode();
      if (Cursor.Length != 0) hash ^= Cursor.GetHashCode();
      if (AccountType != 0) hash ^= AccountType.GetHashCode();
      if (AggregateSession != false) hash ^= AggregateSession.GetHashCode();
      if (JumpCategoryId != 0) hash ^= JumpCategoryId.GetHashCode();
      if (ExpireAt != 0L) hash ^= ExpireAt.GetHashCode();
      if (EffectiveFrom != 0L) hash ^= EffectiveFrom.GetHashCode();
      if (StrTargetId.Length != 0) hash ^= StrTargetId.GetHashCode();
      hash ^= remindBody_.GetHashCode();
      if (TargetReadSeqId != 0L) hash ^= TargetReadSeqId.GetHashCode();
      if (Mute != false) hash ^= Mute.GetHashCode();
      if (Status != global::AcFunDanmu.Im.Message.SessionStatus.SessionValid) hash ^= Status.GetHashCode();
      if (MessageReceiveStatus != global::AcFunDanmu.Im.Message.MessageReceiveStatus.ReceiveMsg) hash ^= MessageReceiveStatus.GetHashCode();
      if (Extra.Length != 0) hash ^= Extra.GetHashCode();
      if (MarkedUnread != false) hash ^= MarkedUnread.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (target_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Target);
      }
      if (MaxSeqId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MaxSeqId);
      }
      if (ReadSeqId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ReadSeqId);
      }
      if (UnreadMsgCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UnreadMsgCount);
      }
      latestMessage_.WriteTo(output, _repeated_latestMessage_codec);
      if (ChatTargetType != global::AcFunDanmu.Im.Message.ChatTargetType.CttUser) {
        output.WriteRawTag(64);
        output.WriteEnum((int) ChatTargetType);
      }
      if (TargetId != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(TargetId);
      }
      if (ActiveTime != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(ActiveTime);
      }
      if (Priority != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Priority);
      }
      if (CategoryId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CategoryId);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Cursor);
      }
      if (AccountType != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(AccountType);
      }
      if (AggregateSession != false) {
        output.WriteRawTag(120);
        output.WriteBool(AggregateSession);
      }
      if (JumpCategoryId != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(JumpCategoryId);
      }
      if (ExpireAt != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(ExpireAt);
      }
      if (EffectiveFrom != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(EffectiveFrom);
      }
      if (StrTargetId.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(StrTargetId);
      }
      remindBody_.WriteTo(output, _repeated_remindBody_codec);
      if (TargetReadSeqId != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(TargetReadSeqId);
      }
      if (Mute != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(Mute);
      }
      if (Status != global::AcFunDanmu.Im.Message.SessionStatus.SessionValid) {
        output.WriteRawTag(184, 1);
        output.WriteEnum((int) Status);
      }
      if (MessageReceiveStatus != global::AcFunDanmu.Im.Message.MessageReceiveStatus.ReceiveMsg) {
        output.WriteRawTag(192, 1);
        output.WriteEnum((int) MessageReceiveStatus);
      }
      if (Extra.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteBytes(Extra);
      }
      if (MarkedUnread != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(MarkedUnread);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (target_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Target);
      }
      if (MaxSeqId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MaxSeqId);
      }
      if (ReadSeqId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ReadSeqId);
      }
      if (UnreadMsgCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UnreadMsgCount);
      }
      latestMessage_.WriteTo(ref output, _repeated_latestMessage_codec);
      if (ChatTargetType != global::AcFunDanmu.Im.Message.ChatTargetType.CttUser) {
        output.WriteRawTag(64);
        output.WriteEnum((int) ChatTargetType);
      }
      if (TargetId != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(TargetId);
      }
      if (ActiveTime != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(ActiveTime);
      }
      if (Priority != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Priority);
      }
      if (CategoryId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CategoryId);
      }
      if (Cursor.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Cursor);
      }
      if (AccountType != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(AccountType);
      }
      if (AggregateSession != false) {
        output.WriteRawTag(120);
        output.WriteBool(AggregateSession);
      }
      if (JumpCategoryId != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(JumpCategoryId);
      }
      if (ExpireAt != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(ExpireAt);
      }
      if (EffectiveFrom != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(EffectiveFrom);
      }
      if (StrTargetId.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(StrTargetId);
      }
      remindBody_.WriteTo(ref output, _repeated_remindBody_codec);
      if (TargetReadSeqId != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(TargetReadSeqId);
      }
      if (Mute != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(Mute);
      }
      if (Status != global::AcFunDanmu.Im.Message.SessionStatus.SessionValid) {
        output.WriteRawTag(184, 1);
        output.WriteEnum((int) Status);
      }
      if (MessageReceiveStatus != global::AcFunDanmu.Im.Message.MessageReceiveStatus.ReceiveMsg) {
        output.WriteRawTag(192, 1);
        output.WriteEnum((int) MessageReceiveStatus);
      }
      if (Extra.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteBytes(Extra);
      }
      if (MarkedUnread != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(MarkedUnread);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (MaxSeqId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxSeqId);
      }
      if (ReadSeqId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReadSeqId);
      }
      if (UnreadMsgCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnreadMsgCount);
      }
      size += latestMessage_.CalculateSize(_repeated_latestMessage_codec);
      if (ChatTargetType != global::AcFunDanmu.Im.Message.ChatTargetType.CttUser) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChatTargetType);
      }
      if (TargetId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetId);
      }
      if (ActiveTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ActiveTime);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Priority);
      }
      if (CategoryId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CategoryId);
      }
      if (Cursor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cursor);
      }
      if (AccountType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccountType);
      }
      if (AggregateSession != false) {
        size += 1 + 1;
      }
      if (JumpCategoryId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(JumpCategoryId);
      }
      if (ExpireAt != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ExpireAt);
      }
      if (EffectiveFrom != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(EffectiveFrom);
      }
      if (StrTargetId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StrTargetId);
      }
      size += remindBody_.CalculateSize(_repeated_remindBody_codec);
      if (TargetReadSeqId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TargetReadSeqId);
      }
      if (Mute != false) {
        size += 2 + 1;
      }
      if (Status != global::AcFunDanmu.Im.Message.SessionStatus.SessionValid) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (MessageReceiveStatus != global::AcFunDanmu.Im.Message.MessageReceiveStatus.ReceiveMsg) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MessageReceiveStatus);
      }
      if (Extra.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Extra);
      }
      if (MarkedUnread != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ChatSession other) {
      if (other == null) {
        return;
      }
      if (other.target_ != null) {
        if (target_ == null) {
          Target = new global::AcFunDanmu.Im.Basic.User();
        }
        Target.MergeFrom(other.Target);
      }
      if (other.MaxSeqId != 0L) {
        MaxSeqId = other.MaxSeqId;
      }
      if (other.ReadSeqId != 0L) {
        ReadSeqId = other.ReadSeqId;
      }
      if (other.UnreadMsgCount != 0) {
        UnreadMsgCount = other.UnreadMsgCount;
      }
      latestMessage_.Add(other.latestMessage_);
      if (other.ChatTargetType != global::AcFunDanmu.Im.Message.ChatTargetType.CttUser) {
        ChatTargetType = other.ChatTargetType;
      }
      if (other.TargetId != 0L) {
        TargetId = other.TargetId;
      }
      if (other.ActiveTime != 0L) {
        ActiveTime = other.ActiveTime;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.CategoryId != 0) {
        CategoryId = other.CategoryId;
      }
      if (other.Cursor.Length != 0) {
        Cursor = other.Cursor;
      }
      if (other.AccountType != 0) {
        AccountType = other.AccountType;
      }
      if (other.AggregateSession != false) {
        AggregateSession = other.AggregateSession;
      }
      if (other.JumpCategoryId != 0) {
        JumpCategoryId = other.JumpCategoryId;
      }
      if (other.ExpireAt != 0L) {
        ExpireAt = other.ExpireAt;
      }
      if (other.EffectiveFrom != 0L) {
        EffectiveFrom = other.EffectiveFrom;
      }
      if (other.StrTargetId.Length != 0) {
        StrTargetId = other.StrTargetId;
      }
      remindBody_.Add(other.remindBody_);
      if (other.TargetReadSeqId != 0L) {
        TargetReadSeqId = other.TargetReadSeqId;
      }
      if (other.Mute != false) {
        Mute = other.Mute;
      }
      if (other.Status != global::AcFunDanmu.Im.Message.SessionStatus.SessionValid) {
        Status = other.Status;
      }
      if (other.MessageReceiveStatus != global::AcFunDanmu.Im.Message.MessageReceiveStatus.ReceiveMsg) {
        MessageReceiveStatus = other.MessageReceiveStatus;
      }
      if (other.Extra.Length != 0) {
        Extra = other.Extra;
      }
      if (other.MarkedUnread != false) {
        MarkedUnread = other.MarkedUnread;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (target_ == null) {
              Target = new global::AcFunDanmu.Im.Basic.User();
            }
            input.ReadMessage(Target);
            break;
          }
          case 16: {
            MaxSeqId = input.ReadInt64();
            break;
          }
          case 24: {
            ReadSeqId = input.ReadInt64();
            break;
          }
          case 32: {
            UnreadMsgCount = input.ReadInt32();
            break;
          }
          case 42: {
            latestMessage_.AddEntriesFrom(input, _repeated_latestMessage_codec);
            break;
          }
          case 64: {
            ChatTargetType = (global::AcFunDanmu.Im.Message.ChatTargetType) input.ReadEnum();
            break;
          }
          case 72: {
            TargetId = input.ReadInt64();
            break;
          }
          case 80: {
            ActiveTime = input.ReadInt64();
            break;
          }
          case 88: {
            Priority = input.ReadInt32();
            break;
          }
          case 96: {
            CategoryId = input.ReadInt32();
            break;
          }
          case 106: {
            Cursor = input.ReadString();
            break;
          }
          case 112: {
            AccountType = input.ReadInt32();
            break;
          }
          case 120: {
            AggregateSession = input.ReadBool();
            break;
          }
          case 128: {
            JumpCategoryId = input.ReadInt32();
            break;
          }
          case 136: {
            ExpireAt = input.ReadInt64();
            break;
          }
          case 144: {
            EffectiveFrom = input.ReadInt64();
            break;
          }
          case 154: {
            StrTargetId = input.ReadString();
            break;
          }
          case 162: {
            remindBody_.AddEntriesFrom(input, _repeated_remindBody_codec);
            break;
          }
          case 168: {
            TargetReadSeqId = input.ReadInt64();
            break;
          }
          case 176: {
            Mute = input.ReadBool();
            break;
          }
          case 184: {
            Status = (global::AcFunDanmu.Im.Message.SessionStatus) input.ReadEnum();
            break;
          }
          case 192: {
            MessageReceiveStatus = (global::AcFunDanmu.Im.Message.MessageReceiveStatus) input.ReadEnum();
            break;
          }
          case 202: {
            Extra = input.ReadBytes();
            break;
          }
          case 208: {
            MarkedUnread = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (target_ == null) {
              Target = new global::AcFunDanmu.Im.Basic.User();
            }
            input.ReadMessage(Target);
            break;
          }
          case 16: {
            MaxSeqId = input.ReadInt64();
            break;
          }
          case 24: {
            ReadSeqId = input.ReadInt64();
            break;
          }
          case 32: {
            UnreadMsgCount = input.ReadInt32();
            break;
          }
          case 42: {
            latestMessage_.AddEntriesFrom(ref input, _repeated_latestMessage_codec);
            break;
          }
          case 64: {
            ChatTargetType = (global::AcFunDanmu.Im.Message.ChatTargetType) input.ReadEnum();
            break;
          }
          case 72: {
            TargetId = input.ReadInt64();
            break;
          }
          case 80: {
            ActiveTime = input.ReadInt64();
            break;
          }
          case 88: {
            Priority = input.ReadInt32();
            break;
          }
          case 96: {
            CategoryId = input.ReadInt32();
            break;
          }
          case 106: {
            Cursor = input.ReadString();
            break;
          }
          case 112: {
            AccountType = input.ReadInt32();
            break;
          }
          case 120: {
            AggregateSession = input.ReadBool();
            break;
          }
          case 128: {
            JumpCategoryId = input.ReadInt32();
            break;
          }
          case 136: {
            ExpireAt = input.ReadInt64();
            break;
          }
          case 144: {
            EffectiveFrom = input.ReadInt64();
            break;
          }
          case 154: {
            StrTargetId = input.ReadString();
            break;
          }
          case 162: {
            remindBody_.AddEntriesFrom(ref input, _repeated_remindBody_codec);
            break;
          }
          case 168: {
            TargetReadSeqId = input.ReadInt64();
            break;
          }
          case 176: {
            Mute = input.ReadBool();
            break;
          }
          case 184: {
            Status = (global::AcFunDanmu.Im.Message.SessionStatus) input.ReadEnum();
            break;
          }
          case 192: {
            MessageReceiveStatus = (global::AcFunDanmu.Im.Message.MessageReceiveStatus) input.ReadEnum();
            break;
          }
          case 202: {
            Extra = input.ReadBytes();
            break;
          }
          case 208: {
            MarkedUnread = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
