// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ClientConfig.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AcFunDanmu.Im.Cloud.Config {

  /// <summary>Holder for reflection information generated from ClientConfig.proto</summary>
  public static partial class ClientConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for ClientConfig.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClientConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJDbGllbnRDb25maWcucHJvdG8SGkFjRnVuRGFubXUuSW0uQ2xvdWQuQ29u",
            "ZmlnGiFDbGllbnRTdGF0aXN0aWNhbERhdGFDb25maWcucHJvdG8aI05ldHdv",
            "cmtRdWFsaXR5RGV0ZWN0aW9uQ29uZmlnLnByb3RvGh1TdWJCaXpBZ2dyZWdh",
            "dGlvbkNvbmZpZy5wcm90byKJCAoMQ2xpZW50Q29uZmlnEh8KF2ZldGNoVXNl",
            "clN0YXR1c0ludGVydmFsGAEgASgFEiQKHGNoYW5uZWxVc2VySGVhcnRiZWF0",
            "SW50ZXJ2YWwYAiABKAUSYAodbmV0d29ya1F1YWxpdHlEZXRlY3Rpb25Db25m",
            "aWcYAyABKAsyOS5BY0Z1bkRhbm11LkltLkNsb3VkLkNvbmZpZy5OZXR3b3Jr",
            "UXVhbGl0eURldGVjdGlvbkNvbmZpZxIjChtpbnB1dHRpbmdUaXBEaXNwbGF5",
            "SW50ZXJ2YWwYBCABKAUSIAoYYmF0Y2hTZW5kTWVzc2FnZU1heENvdW50GAUg",
            "ASgFEh8KF3Jlc291cmNlVXBsb2FkaW5nRG9tYWluGAYgASgJEhsKE2t0cEZp",
            "bGVMZW5UaHJlc2hvbGQYByABKAUSGgoSa3RwVXBsb2FkaW5nRG9tYWluGAgg",
            "ASgJEh8KF2NsaWVudFN5bmNNaW5JbnRlcnZhbE1zGAkgASgFEiQKHGRvd25s",
            "b2FkRmlsZU1heExlblBlclJlcXVlc3QYCiABKAUSXAobY2xpZW50U3RhdGlz",
            "dGljYWxEYXRhQ29uZmlnGAsgASgLMjcuQWNGdW5EYW5tdS5JbS5DbG91ZC5D",
            "b25maWcuQ2xpZW50U3RhdGlzdGljYWxEYXRhQ29uZmlnEh0KFW1heE1lc3Nh",
            "Z2VCeXRlc0xlbmd0aBgMIAEoBRInCh9zZXNzaW9uRGVsZXRpb25Ob3RPdmVy",
            "QWxsRGV2aWNlGA0gASgIElQKF3N1YkJpekFnZ3JlZ2F0aW9uQ29uZmlnGA4g",
            "ASgLMjMuQWNGdW5EYW5tdS5JbS5DbG91ZC5Db25maWcuU3ViQml6QWdncmVn",
            "YXRpb25Db25maWcSJAocY291bnRWaXNpYmxlTWVzc2FnZVRocmVzaG9sZBgP",
            "IAEoBRIzCitkaXNhYmxlU2Vzc2lvblN5bmNXaGVuQXBwU3dpdGNoVG9Gb3Jl",
            "Z3JvdW5kGBAgASgIEioKIm1heE1lc3NhZ2VzUHJlbG9hZEFmdGVyU2Vzc2lv",
            "blN5bmMYESABKAUSNQotbWF4U2Vzc2lvbnNOZWVkUHJlbG9hZE1lc3NhZ2VB",
            "ZnRlclNlc3Npb25TeW5jGBIgASgFEhUKDXp0SW1BcGlEb21haW4YEyABKAkS",
            "IAoYdm9pY2VDYWxsVGltZW91dEludGVydmFsGBQgASgFEiIKGnZvaWNlQ2Fs",
            "bEhlYXJ0YmVhdEludGVydmFsGBUgASgFEhgKEGNsaWNrTWVzc2FnZVR5cGUY",
            "FiADKAUSHAoUYXV0b1JldHJ5TWF4SW50ZXJ2YWwYFyABKAUSGQoRYXV0b1Jl",
            "dHJ5TWF4VGltZXMYGCABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AcFunDanmu.Im.Cloud.Config.ClientStatisticalDataConfigReflection.Descriptor, global::AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfigReflection.Descriptor, global::AcFunDanmu.Im.Cloud.Config.SubBizAggregationConfigReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.Im.Cloud.Config.ClientConfig), global::AcFunDanmu.Im.Cloud.Config.ClientConfig.Parser, new[]{ "FetchUserStatusInterval", "ChannelUserHeartbeatInterval", "NetworkQualityDetectionConfig", "InputtingTipDisplayInterval", "BatchSendMessageMaxCount", "ResourceUploadingDomain", "KtpFileLenThreshold", "KtpUploadingDomain", "ClientSyncMinIntervalMs", "DownloadFileMaxLenPerRequest", "ClientStatisticalDataConfig", "MaxMessageBytesLength", "SessionDeletionNotOverAllDevice", "SubBizAggregationConfig", "CountVisibleMessageThreshold", "DisableSessionSyncWhenAppSwitchToForeground", "MaxMessagesPreloadAfterSessionSync", "MaxSessionsNeedPreloadMessageAfterSessionSync", "ZtImApiDomain", "VoiceCallTimeoutInterval", "VoiceCallHeartbeatInterval", "ClickMessageType", "AutoRetryMaxInterval", "AutoRetryMaxTimes" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ClientConfig : pb::IMessage<ClientConfig>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClientConfig> _parser = new pb::MessageParser<ClientConfig>(() => new ClientConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ClientConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.Im.Cloud.Config.ClientConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClientConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClientConfig(ClientConfig other) : this() {
      fetchUserStatusInterval_ = other.fetchUserStatusInterval_;
      channelUserHeartbeatInterval_ = other.channelUserHeartbeatInterval_;
      networkQualityDetectionConfig_ = other.networkQualityDetectionConfig_ != null ? other.networkQualityDetectionConfig_.Clone() : null;
      inputtingTipDisplayInterval_ = other.inputtingTipDisplayInterval_;
      batchSendMessageMaxCount_ = other.batchSendMessageMaxCount_;
      resourceUploadingDomain_ = other.resourceUploadingDomain_;
      ktpFileLenThreshold_ = other.ktpFileLenThreshold_;
      ktpUploadingDomain_ = other.ktpUploadingDomain_;
      clientSyncMinIntervalMs_ = other.clientSyncMinIntervalMs_;
      downloadFileMaxLenPerRequest_ = other.downloadFileMaxLenPerRequest_;
      clientStatisticalDataConfig_ = other.clientStatisticalDataConfig_ != null ? other.clientStatisticalDataConfig_.Clone() : null;
      maxMessageBytesLength_ = other.maxMessageBytesLength_;
      sessionDeletionNotOverAllDevice_ = other.sessionDeletionNotOverAllDevice_;
      subBizAggregationConfig_ = other.subBizAggregationConfig_ != null ? other.subBizAggregationConfig_.Clone() : null;
      countVisibleMessageThreshold_ = other.countVisibleMessageThreshold_;
      disableSessionSyncWhenAppSwitchToForeground_ = other.disableSessionSyncWhenAppSwitchToForeground_;
      maxMessagesPreloadAfterSessionSync_ = other.maxMessagesPreloadAfterSessionSync_;
      maxSessionsNeedPreloadMessageAfterSessionSync_ = other.maxSessionsNeedPreloadMessageAfterSessionSync_;
      ztImApiDomain_ = other.ztImApiDomain_;
      voiceCallTimeoutInterval_ = other.voiceCallTimeoutInterval_;
      voiceCallHeartbeatInterval_ = other.voiceCallHeartbeatInterval_;
      clickMessageType_ = other.clickMessageType_.Clone();
      autoRetryMaxInterval_ = other.autoRetryMaxInterval_;
      autoRetryMaxTimes_ = other.autoRetryMaxTimes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ClientConfig Clone() {
      return new ClientConfig(this);
    }

    /// <summary>Field number for the "fetchUserStatusInterval" field.</summary>
    public const int FetchUserStatusIntervalFieldNumber = 1;
    private int fetchUserStatusInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FetchUserStatusInterval {
      get { return fetchUserStatusInterval_; }
      set {
        fetchUserStatusInterval_ = value;
      }
    }

    /// <summary>Field number for the "channelUserHeartbeatInterval" field.</summary>
    public const int ChannelUserHeartbeatIntervalFieldNumber = 2;
    private int channelUserHeartbeatInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ChannelUserHeartbeatInterval {
      get { return channelUserHeartbeatInterval_; }
      set {
        channelUserHeartbeatInterval_ = value;
      }
    }

    /// <summary>Field number for the "networkQualityDetectionConfig" field.</summary>
    public const int NetworkQualityDetectionConfigFieldNumber = 3;
    private global::AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig networkQualityDetectionConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig NetworkQualityDetectionConfig {
      get { return networkQualityDetectionConfig_; }
      set {
        networkQualityDetectionConfig_ = value;
      }
    }

    /// <summary>Field number for the "inputtingTipDisplayInterval" field.</summary>
    public const int InputtingTipDisplayIntervalFieldNumber = 4;
    private int inputtingTipDisplayInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InputtingTipDisplayInterval {
      get { return inputtingTipDisplayInterval_; }
      set {
        inputtingTipDisplayInterval_ = value;
      }
    }

    /// <summary>Field number for the "batchSendMessageMaxCount" field.</summary>
    public const int BatchSendMessageMaxCountFieldNumber = 5;
    private int batchSendMessageMaxCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BatchSendMessageMaxCount {
      get { return batchSendMessageMaxCount_; }
      set {
        batchSendMessageMaxCount_ = value;
      }
    }

    /// <summary>Field number for the "resourceUploadingDomain" field.</summary>
    public const int ResourceUploadingDomainFieldNumber = 6;
    private string resourceUploadingDomain_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ResourceUploadingDomain {
      get { return resourceUploadingDomain_; }
      set {
        resourceUploadingDomain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ktpFileLenThreshold" field.</summary>
    public const int KtpFileLenThresholdFieldNumber = 7;
    private int ktpFileLenThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int KtpFileLenThreshold {
      get { return ktpFileLenThreshold_; }
      set {
        ktpFileLenThreshold_ = value;
      }
    }

    /// <summary>Field number for the "ktpUploadingDomain" field.</summary>
    public const int KtpUploadingDomainFieldNumber = 8;
    private string ktpUploadingDomain_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string KtpUploadingDomain {
      get { return ktpUploadingDomain_; }
      set {
        ktpUploadingDomain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clientSyncMinIntervalMs" field.</summary>
    public const int ClientSyncMinIntervalMsFieldNumber = 9;
    private int clientSyncMinIntervalMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ClientSyncMinIntervalMs {
      get { return clientSyncMinIntervalMs_; }
      set {
        clientSyncMinIntervalMs_ = value;
      }
    }

    /// <summary>Field number for the "downloadFileMaxLenPerRequest" field.</summary>
    public const int DownloadFileMaxLenPerRequestFieldNumber = 10;
    private int downloadFileMaxLenPerRequest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DownloadFileMaxLenPerRequest {
      get { return downloadFileMaxLenPerRequest_; }
      set {
        downloadFileMaxLenPerRequest_ = value;
      }
    }

    /// <summary>Field number for the "clientStatisticalDataConfig" field.</summary>
    public const int ClientStatisticalDataConfigFieldNumber = 11;
    private global::AcFunDanmu.Im.Cloud.Config.ClientStatisticalDataConfig clientStatisticalDataConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::AcFunDanmu.Im.Cloud.Config.ClientStatisticalDataConfig ClientStatisticalDataConfig {
      get { return clientStatisticalDataConfig_; }
      set {
        clientStatisticalDataConfig_ = value;
      }
    }

    /// <summary>Field number for the "maxMessageBytesLength" field.</summary>
    public const int MaxMessageBytesLengthFieldNumber = 12;
    private int maxMessageBytesLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxMessageBytesLength {
      get { return maxMessageBytesLength_; }
      set {
        maxMessageBytesLength_ = value;
      }
    }

    /// <summary>Field number for the "sessionDeletionNotOverAllDevice" field.</summary>
    public const int SessionDeletionNotOverAllDeviceFieldNumber = 13;
    private bool sessionDeletionNotOverAllDevice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SessionDeletionNotOverAllDevice {
      get { return sessionDeletionNotOverAllDevice_; }
      set {
        sessionDeletionNotOverAllDevice_ = value;
      }
    }

    /// <summary>Field number for the "subBizAggregationConfig" field.</summary>
    public const int SubBizAggregationConfigFieldNumber = 14;
    private global::AcFunDanmu.Im.Cloud.Config.SubBizAggregationConfig subBizAggregationConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::AcFunDanmu.Im.Cloud.Config.SubBizAggregationConfig SubBizAggregationConfig {
      get { return subBizAggregationConfig_; }
      set {
        subBizAggregationConfig_ = value;
      }
    }

    /// <summary>Field number for the "countVisibleMessageThreshold" field.</summary>
    public const int CountVisibleMessageThresholdFieldNumber = 15;
    private int countVisibleMessageThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CountVisibleMessageThreshold {
      get { return countVisibleMessageThreshold_; }
      set {
        countVisibleMessageThreshold_ = value;
      }
    }

    /// <summary>Field number for the "disableSessionSyncWhenAppSwitchToForeground" field.</summary>
    public const int DisableSessionSyncWhenAppSwitchToForegroundFieldNumber = 16;
    private bool disableSessionSyncWhenAppSwitchToForeground_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DisableSessionSyncWhenAppSwitchToForeground {
      get { return disableSessionSyncWhenAppSwitchToForeground_; }
      set {
        disableSessionSyncWhenAppSwitchToForeground_ = value;
      }
    }

    /// <summary>Field number for the "maxMessagesPreloadAfterSessionSync" field.</summary>
    public const int MaxMessagesPreloadAfterSessionSyncFieldNumber = 17;
    private int maxMessagesPreloadAfterSessionSync_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxMessagesPreloadAfterSessionSync {
      get { return maxMessagesPreloadAfterSessionSync_; }
      set {
        maxMessagesPreloadAfterSessionSync_ = value;
      }
    }

    /// <summary>Field number for the "maxSessionsNeedPreloadMessageAfterSessionSync" field.</summary>
    public const int MaxSessionsNeedPreloadMessageAfterSessionSyncFieldNumber = 18;
    private int maxSessionsNeedPreloadMessageAfterSessionSync_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxSessionsNeedPreloadMessageAfterSessionSync {
      get { return maxSessionsNeedPreloadMessageAfterSessionSync_; }
      set {
        maxSessionsNeedPreloadMessageAfterSessionSync_ = value;
      }
    }

    /// <summary>Field number for the "ztImApiDomain" field.</summary>
    public const int ZtImApiDomainFieldNumber = 19;
    private string ztImApiDomain_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ZtImApiDomain {
      get { return ztImApiDomain_; }
      set {
        ztImApiDomain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "voiceCallTimeoutInterval" field.</summary>
    public const int VoiceCallTimeoutIntervalFieldNumber = 20;
    private int voiceCallTimeoutInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VoiceCallTimeoutInterval {
      get { return voiceCallTimeoutInterval_; }
      set {
        voiceCallTimeoutInterval_ = value;
      }
    }

    /// <summary>Field number for the "voiceCallHeartbeatInterval" field.</summary>
    public const int VoiceCallHeartbeatIntervalFieldNumber = 21;
    private int voiceCallHeartbeatInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VoiceCallHeartbeatInterval {
      get { return voiceCallHeartbeatInterval_; }
      set {
        voiceCallHeartbeatInterval_ = value;
      }
    }

    /// <summary>Field number for the "clickMessageType" field.</summary>
    public const int ClickMessageTypeFieldNumber = 22;
    private static readonly pb::FieldCodec<int> _repeated_clickMessageType_codec
        = pb::FieldCodec.ForInt32(178);
    private readonly pbc::RepeatedField<int> clickMessageType_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> ClickMessageType {
      get { return clickMessageType_; }
    }

    /// <summary>Field number for the "autoRetryMaxInterval" field.</summary>
    public const int AutoRetryMaxIntervalFieldNumber = 23;
    private int autoRetryMaxInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AutoRetryMaxInterval {
      get { return autoRetryMaxInterval_; }
      set {
        autoRetryMaxInterval_ = value;
      }
    }

    /// <summary>Field number for the "autoRetryMaxTimes" field.</summary>
    public const int AutoRetryMaxTimesFieldNumber = 24;
    private int autoRetryMaxTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AutoRetryMaxTimes {
      get { return autoRetryMaxTimes_; }
      set {
        autoRetryMaxTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ClientConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ClientConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FetchUserStatusInterval != other.FetchUserStatusInterval) return false;
      if (ChannelUserHeartbeatInterval != other.ChannelUserHeartbeatInterval) return false;
      if (!object.Equals(NetworkQualityDetectionConfig, other.NetworkQualityDetectionConfig)) return false;
      if (InputtingTipDisplayInterval != other.InputtingTipDisplayInterval) return false;
      if (BatchSendMessageMaxCount != other.BatchSendMessageMaxCount) return false;
      if (ResourceUploadingDomain != other.ResourceUploadingDomain) return false;
      if (KtpFileLenThreshold != other.KtpFileLenThreshold) return false;
      if (KtpUploadingDomain != other.KtpUploadingDomain) return false;
      if (ClientSyncMinIntervalMs != other.ClientSyncMinIntervalMs) return false;
      if (DownloadFileMaxLenPerRequest != other.DownloadFileMaxLenPerRequest) return false;
      if (!object.Equals(ClientStatisticalDataConfig, other.ClientStatisticalDataConfig)) return false;
      if (MaxMessageBytesLength != other.MaxMessageBytesLength) return false;
      if (SessionDeletionNotOverAllDevice != other.SessionDeletionNotOverAllDevice) return false;
      if (!object.Equals(SubBizAggregationConfig, other.SubBizAggregationConfig)) return false;
      if (CountVisibleMessageThreshold != other.CountVisibleMessageThreshold) return false;
      if (DisableSessionSyncWhenAppSwitchToForeground != other.DisableSessionSyncWhenAppSwitchToForeground) return false;
      if (MaxMessagesPreloadAfterSessionSync != other.MaxMessagesPreloadAfterSessionSync) return false;
      if (MaxSessionsNeedPreloadMessageAfterSessionSync != other.MaxSessionsNeedPreloadMessageAfterSessionSync) return false;
      if (ZtImApiDomain != other.ZtImApiDomain) return false;
      if (VoiceCallTimeoutInterval != other.VoiceCallTimeoutInterval) return false;
      if (VoiceCallHeartbeatInterval != other.VoiceCallHeartbeatInterval) return false;
      if(!clickMessageType_.Equals(other.clickMessageType_)) return false;
      if (AutoRetryMaxInterval != other.AutoRetryMaxInterval) return false;
      if (AutoRetryMaxTimes != other.AutoRetryMaxTimes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (FetchUserStatusInterval != 0) hash ^= FetchUserStatusInterval.GetHashCode();
      if (ChannelUserHeartbeatInterval != 0) hash ^= ChannelUserHeartbeatInterval.GetHashCode();
      if (networkQualityDetectionConfig_ != null) hash ^= NetworkQualityDetectionConfig.GetHashCode();
      if (InputtingTipDisplayInterval != 0) hash ^= InputtingTipDisplayInterval.GetHashCode();
      if (BatchSendMessageMaxCount != 0) hash ^= BatchSendMessageMaxCount.GetHashCode();
      if (ResourceUploadingDomain.Length != 0) hash ^= ResourceUploadingDomain.GetHashCode();
      if (KtpFileLenThreshold != 0) hash ^= KtpFileLenThreshold.GetHashCode();
      if (KtpUploadingDomain.Length != 0) hash ^= KtpUploadingDomain.GetHashCode();
      if (ClientSyncMinIntervalMs != 0) hash ^= ClientSyncMinIntervalMs.GetHashCode();
      if (DownloadFileMaxLenPerRequest != 0) hash ^= DownloadFileMaxLenPerRequest.GetHashCode();
      if (clientStatisticalDataConfig_ != null) hash ^= ClientStatisticalDataConfig.GetHashCode();
      if (MaxMessageBytesLength != 0) hash ^= MaxMessageBytesLength.GetHashCode();
      if (SessionDeletionNotOverAllDevice != false) hash ^= SessionDeletionNotOverAllDevice.GetHashCode();
      if (subBizAggregationConfig_ != null) hash ^= SubBizAggregationConfig.GetHashCode();
      if (CountVisibleMessageThreshold != 0) hash ^= CountVisibleMessageThreshold.GetHashCode();
      if (DisableSessionSyncWhenAppSwitchToForeground != false) hash ^= DisableSessionSyncWhenAppSwitchToForeground.GetHashCode();
      if (MaxMessagesPreloadAfterSessionSync != 0) hash ^= MaxMessagesPreloadAfterSessionSync.GetHashCode();
      if (MaxSessionsNeedPreloadMessageAfterSessionSync != 0) hash ^= MaxSessionsNeedPreloadMessageAfterSessionSync.GetHashCode();
      if (ZtImApiDomain.Length != 0) hash ^= ZtImApiDomain.GetHashCode();
      if (VoiceCallTimeoutInterval != 0) hash ^= VoiceCallTimeoutInterval.GetHashCode();
      if (VoiceCallHeartbeatInterval != 0) hash ^= VoiceCallHeartbeatInterval.GetHashCode();
      hash ^= clickMessageType_.GetHashCode();
      if (AutoRetryMaxInterval != 0) hash ^= AutoRetryMaxInterval.GetHashCode();
      if (AutoRetryMaxTimes != 0) hash ^= AutoRetryMaxTimes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FetchUserStatusInterval != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FetchUserStatusInterval);
      }
      if (ChannelUserHeartbeatInterval != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChannelUserHeartbeatInterval);
      }
      if (networkQualityDetectionConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NetworkQualityDetectionConfig);
      }
      if (InputtingTipDisplayInterval != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(InputtingTipDisplayInterval);
      }
      if (BatchSendMessageMaxCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BatchSendMessageMaxCount);
      }
      if (ResourceUploadingDomain.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ResourceUploadingDomain);
      }
      if (KtpFileLenThreshold != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(KtpFileLenThreshold);
      }
      if (KtpUploadingDomain.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(KtpUploadingDomain);
      }
      if (ClientSyncMinIntervalMs != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ClientSyncMinIntervalMs);
      }
      if (DownloadFileMaxLenPerRequest != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(DownloadFileMaxLenPerRequest);
      }
      if (clientStatisticalDataConfig_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(ClientStatisticalDataConfig);
      }
      if (MaxMessageBytesLength != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MaxMessageBytesLength);
      }
      if (SessionDeletionNotOverAllDevice != false) {
        output.WriteRawTag(104);
        output.WriteBool(SessionDeletionNotOverAllDevice);
      }
      if (subBizAggregationConfig_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(SubBizAggregationConfig);
      }
      if (CountVisibleMessageThreshold != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(CountVisibleMessageThreshold);
      }
      if (DisableSessionSyncWhenAppSwitchToForeground != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(DisableSessionSyncWhenAppSwitchToForeground);
      }
      if (MaxMessagesPreloadAfterSessionSync != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(MaxMessagesPreloadAfterSessionSync);
      }
      if (MaxSessionsNeedPreloadMessageAfterSessionSync != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(MaxSessionsNeedPreloadMessageAfterSessionSync);
      }
      if (ZtImApiDomain.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ZtImApiDomain);
      }
      if (VoiceCallTimeoutInterval != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(VoiceCallTimeoutInterval);
      }
      if (VoiceCallHeartbeatInterval != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(VoiceCallHeartbeatInterval);
      }
      clickMessageType_.WriteTo(output, _repeated_clickMessageType_codec);
      if (AutoRetryMaxInterval != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(AutoRetryMaxInterval);
      }
      if (AutoRetryMaxTimes != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(AutoRetryMaxTimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FetchUserStatusInterval != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FetchUserStatusInterval);
      }
      if (ChannelUserHeartbeatInterval != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChannelUserHeartbeatInterval);
      }
      if (networkQualityDetectionConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NetworkQualityDetectionConfig);
      }
      if (InputtingTipDisplayInterval != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(InputtingTipDisplayInterval);
      }
      if (BatchSendMessageMaxCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BatchSendMessageMaxCount);
      }
      if (ResourceUploadingDomain.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ResourceUploadingDomain);
      }
      if (KtpFileLenThreshold != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(KtpFileLenThreshold);
      }
      if (KtpUploadingDomain.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(KtpUploadingDomain);
      }
      if (ClientSyncMinIntervalMs != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(ClientSyncMinIntervalMs);
      }
      if (DownloadFileMaxLenPerRequest != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(DownloadFileMaxLenPerRequest);
      }
      if (clientStatisticalDataConfig_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(ClientStatisticalDataConfig);
      }
      if (MaxMessageBytesLength != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MaxMessageBytesLength);
      }
      if (SessionDeletionNotOverAllDevice != false) {
        output.WriteRawTag(104);
        output.WriteBool(SessionDeletionNotOverAllDevice);
      }
      if (subBizAggregationConfig_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(SubBizAggregationConfig);
      }
      if (CountVisibleMessageThreshold != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(CountVisibleMessageThreshold);
      }
      if (DisableSessionSyncWhenAppSwitchToForeground != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(DisableSessionSyncWhenAppSwitchToForeground);
      }
      if (MaxMessagesPreloadAfterSessionSync != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(MaxMessagesPreloadAfterSessionSync);
      }
      if (MaxSessionsNeedPreloadMessageAfterSessionSync != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(MaxSessionsNeedPreloadMessageAfterSessionSync);
      }
      if (ZtImApiDomain.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ZtImApiDomain);
      }
      if (VoiceCallTimeoutInterval != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(VoiceCallTimeoutInterval);
      }
      if (VoiceCallHeartbeatInterval != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(VoiceCallHeartbeatInterval);
      }
      clickMessageType_.WriteTo(ref output, _repeated_clickMessageType_codec);
      if (AutoRetryMaxInterval != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(AutoRetryMaxInterval);
      }
      if (AutoRetryMaxTimes != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(AutoRetryMaxTimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (FetchUserStatusInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FetchUserStatusInterval);
      }
      if (ChannelUserHeartbeatInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChannelUserHeartbeatInterval);
      }
      if (networkQualityDetectionConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetworkQualityDetectionConfig);
      }
      if (InputtingTipDisplayInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputtingTipDisplayInterval);
      }
      if (BatchSendMessageMaxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BatchSendMessageMaxCount);
      }
      if (ResourceUploadingDomain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceUploadingDomain);
      }
      if (KtpFileLenThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KtpFileLenThreshold);
      }
      if (KtpUploadingDomain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KtpUploadingDomain);
      }
      if (ClientSyncMinIntervalMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientSyncMinIntervalMs);
      }
      if (DownloadFileMaxLenPerRequest != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DownloadFileMaxLenPerRequest);
      }
      if (clientStatisticalDataConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientStatisticalDataConfig);
      }
      if (MaxMessageBytesLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMessageBytesLength);
      }
      if (SessionDeletionNotOverAllDevice != false) {
        size += 1 + 1;
      }
      if (subBizAggregationConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubBizAggregationConfig);
      }
      if (CountVisibleMessageThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CountVisibleMessageThreshold);
      }
      if (DisableSessionSyncWhenAppSwitchToForeground != false) {
        size += 2 + 1;
      }
      if (MaxMessagesPreloadAfterSessionSync != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxMessagesPreloadAfterSessionSync);
      }
      if (MaxSessionsNeedPreloadMessageAfterSessionSync != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MaxSessionsNeedPreloadMessageAfterSessionSync);
      }
      if (ZtImApiDomain.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ZtImApiDomain);
      }
      if (VoiceCallTimeoutInterval != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VoiceCallTimeoutInterval);
      }
      if (VoiceCallHeartbeatInterval != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VoiceCallHeartbeatInterval);
      }
      size += clickMessageType_.CalculateSize(_repeated_clickMessageType_codec);
      if (AutoRetryMaxInterval != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AutoRetryMaxInterval);
      }
      if (AutoRetryMaxTimes != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AutoRetryMaxTimes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ClientConfig other) {
      if (other == null) {
        return;
      }
      if (other.FetchUserStatusInterval != 0) {
        FetchUserStatusInterval = other.FetchUserStatusInterval;
      }
      if (other.ChannelUserHeartbeatInterval != 0) {
        ChannelUserHeartbeatInterval = other.ChannelUserHeartbeatInterval;
      }
      if (other.networkQualityDetectionConfig_ != null) {
        if (networkQualityDetectionConfig_ == null) {
          NetworkQualityDetectionConfig = new global::AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig();
        }
        NetworkQualityDetectionConfig.MergeFrom(other.NetworkQualityDetectionConfig);
      }
      if (other.InputtingTipDisplayInterval != 0) {
        InputtingTipDisplayInterval = other.InputtingTipDisplayInterval;
      }
      if (other.BatchSendMessageMaxCount != 0) {
        BatchSendMessageMaxCount = other.BatchSendMessageMaxCount;
      }
      if (other.ResourceUploadingDomain.Length != 0) {
        ResourceUploadingDomain = other.ResourceUploadingDomain;
      }
      if (other.KtpFileLenThreshold != 0) {
        KtpFileLenThreshold = other.KtpFileLenThreshold;
      }
      if (other.KtpUploadingDomain.Length != 0) {
        KtpUploadingDomain = other.KtpUploadingDomain;
      }
      if (other.ClientSyncMinIntervalMs != 0) {
        ClientSyncMinIntervalMs = other.ClientSyncMinIntervalMs;
      }
      if (other.DownloadFileMaxLenPerRequest != 0) {
        DownloadFileMaxLenPerRequest = other.DownloadFileMaxLenPerRequest;
      }
      if (other.clientStatisticalDataConfig_ != null) {
        if (clientStatisticalDataConfig_ == null) {
          ClientStatisticalDataConfig = new global::AcFunDanmu.Im.Cloud.Config.ClientStatisticalDataConfig();
        }
        ClientStatisticalDataConfig.MergeFrom(other.ClientStatisticalDataConfig);
      }
      if (other.MaxMessageBytesLength != 0) {
        MaxMessageBytesLength = other.MaxMessageBytesLength;
      }
      if (other.SessionDeletionNotOverAllDevice != false) {
        SessionDeletionNotOverAllDevice = other.SessionDeletionNotOverAllDevice;
      }
      if (other.subBizAggregationConfig_ != null) {
        if (subBizAggregationConfig_ == null) {
          SubBizAggregationConfig = new global::AcFunDanmu.Im.Cloud.Config.SubBizAggregationConfig();
        }
        SubBizAggregationConfig.MergeFrom(other.SubBizAggregationConfig);
      }
      if (other.CountVisibleMessageThreshold != 0) {
        CountVisibleMessageThreshold = other.CountVisibleMessageThreshold;
      }
      if (other.DisableSessionSyncWhenAppSwitchToForeground != false) {
        DisableSessionSyncWhenAppSwitchToForeground = other.DisableSessionSyncWhenAppSwitchToForeground;
      }
      if (other.MaxMessagesPreloadAfterSessionSync != 0) {
        MaxMessagesPreloadAfterSessionSync = other.MaxMessagesPreloadAfterSessionSync;
      }
      if (other.MaxSessionsNeedPreloadMessageAfterSessionSync != 0) {
        MaxSessionsNeedPreloadMessageAfterSessionSync = other.MaxSessionsNeedPreloadMessageAfterSessionSync;
      }
      if (other.ZtImApiDomain.Length != 0) {
        ZtImApiDomain = other.ZtImApiDomain;
      }
      if (other.VoiceCallTimeoutInterval != 0) {
        VoiceCallTimeoutInterval = other.VoiceCallTimeoutInterval;
      }
      if (other.VoiceCallHeartbeatInterval != 0) {
        VoiceCallHeartbeatInterval = other.VoiceCallHeartbeatInterval;
      }
      clickMessageType_.Add(other.clickMessageType_);
      if (other.AutoRetryMaxInterval != 0) {
        AutoRetryMaxInterval = other.AutoRetryMaxInterval;
      }
      if (other.AutoRetryMaxTimes != 0) {
        AutoRetryMaxTimes = other.AutoRetryMaxTimes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FetchUserStatusInterval = input.ReadInt32();
            break;
          }
          case 16: {
            ChannelUserHeartbeatInterval = input.ReadInt32();
            break;
          }
          case 26: {
            if (networkQualityDetectionConfig_ == null) {
              NetworkQualityDetectionConfig = new global::AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig();
            }
            input.ReadMessage(NetworkQualityDetectionConfig);
            break;
          }
          case 32: {
            InputtingTipDisplayInterval = input.ReadInt32();
            break;
          }
          case 40: {
            BatchSendMessageMaxCount = input.ReadInt32();
            break;
          }
          case 50: {
            ResourceUploadingDomain = input.ReadString();
            break;
          }
          case 56: {
            KtpFileLenThreshold = input.ReadInt32();
            break;
          }
          case 66: {
            KtpUploadingDomain = input.ReadString();
            break;
          }
          case 72: {
            ClientSyncMinIntervalMs = input.ReadInt32();
            break;
          }
          case 80: {
            DownloadFileMaxLenPerRequest = input.ReadInt32();
            break;
          }
          case 90: {
            if (clientStatisticalDataConfig_ == null) {
              ClientStatisticalDataConfig = new global::AcFunDanmu.Im.Cloud.Config.ClientStatisticalDataConfig();
            }
            input.ReadMessage(ClientStatisticalDataConfig);
            break;
          }
          case 96: {
            MaxMessageBytesLength = input.ReadInt32();
            break;
          }
          case 104: {
            SessionDeletionNotOverAllDevice = input.ReadBool();
            break;
          }
          case 114: {
            if (subBizAggregationConfig_ == null) {
              SubBizAggregationConfig = new global::AcFunDanmu.Im.Cloud.Config.SubBizAggregationConfig();
            }
            input.ReadMessage(SubBizAggregationConfig);
            break;
          }
          case 120: {
            CountVisibleMessageThreshold = input.ReadInt32();
            break;
          }
          case 128: {
            DisableSessionSyncWhenAppSwitchToForeground = input.ReadBool();
            break;
          }
          case 136: {
            MaxMessagesPreloadAfterSessionSync = input.ReadInt32();
            break;
          }
          case 144: {
            MaxSessionsNeedPreloadMessageAfterSessionSync = input.ReadInt32();
            break;
          }
          case 154: {
            ZtImApiDomain = input.ReadString();
            break;
          }
          case 160: {
            VoiceCallTimeoutInterval = input.ReadInt32();
            break;
          }
          case 168: {
            VoiceCallHeartbeatInterval = input.ReadInt32();
            break;
          }
          case 178:
          case 176: {
            clickMessageType_.AddEntriesFrom(input, _repeated_clickMessageType_codec);
            break;
          }
          case 184: {
            AutoRetryMaxInterval = input.ReadInt32();
            break;
          }
          case 192: {
            AutoRetryMaxTimes = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FetchUserStatusInterval = input.ReadInt32();
            break;
          }
          case 16: {
            ChannelUserHeartbeatInterval = input.ReadInt32();
            break;
          }
          case 26: {
            if (networkQualityDetectionConfig_ == null) {
              NetworkQualityDetectionConfig = new global::AcFunDanmu.Im.Cloud.Config.NetworkQualityDetectionConfig();
            }
            input.ReadMessage(NetworkQualityDetectionConfig);
            break;
          }
          case 32: {
            InputtingTipDisplayInterval = input.ReadInt32();
            break;
          }
          case 40: {
            BatchSendMessageMaxCount = input.ReadInt32();
            break;
          }
          case 50: {
            ResourceUploadingDomain = input.ReadString();
            break;
          }
          case 56: {
            KtpFileLenThreshold = input.ReadInt32();
            break;
          }
          case 66: {
            KtpUploadingDomain = input.ReadString();
            break;
          }
          case 72: {
            ClientSyncMinIntervalMs = input.ReadInt32();
            break;
          }
          case 80: {
            DownloadFileMaxLenPerRequest = input.ReadInt32();
            break;
          }
          case 90: {
            if (clientStatisticalDataConfig_ == null) {
              ClientStatisticalDataConfig = new global::AcFunDanmu.Im.Cloud.Config.ClientStatisticalDataConfig();
            }
            input.ReadMessage(ClientStatisticalDataConfig);
            break;
          }
          case 96: {
            MaxMessageBytesLength = input.ReadInt32();
            break;
          }
          case 104: {
            SessionDeletionNotOverAllDevice = input.ReadBool();
            break;
          }
          case 114: {
            if (subBizAggregationConfig_ == null) {
              SubBizAggregationConfig = new global::AcFunDanmu.Im.Cloud.Config.SubBizAggregationConfig();
            }
            input.ReadMessage(SubBizAggregationConfig);
            break;
          }
          case 120: {
            CountVisibleMessageThreshold = input.ReadInt32();
            break;
          }
          case 128: {
            DisableSessionSyncWhenAppSwitchToForeground = input.ReadBool();
            break;
          }
          case 136: {
            MaxMessagesPreloadAfterSessionSync = input.ReadInt32();
            break;
          }
          case 144: {
            MaxSessionsNeedPreloadMessageAfterSessionSync = input.ReadInt32();
            break;
          }
          case 154: {
            ZtImApiDomain = input.ReadString();
            break;
          }
          case 160: {
            VoiceCallTimeoutInterval = input.ReadInt32();
            break;
          }
          case 168: {
            VoiceCallHeartbeatInterval = input.ReadInt32();
            break;
          }
          case 178:
          case 176: {
            clickMessageType_.AddEntriesFrom(ref input, _repeated_clickMessageType_codec);
            break;
          }
          case 184: {
            AutoRetryMaxInterval = input.ReadInt32();
            break;
          }
          case 192: {
            AutoRetryMaxTimes = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
