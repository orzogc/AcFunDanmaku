// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ZtLiveScMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AcFunDanmu {

  /// <summary>Holder for reflection information generated from ZtLiveScMessage.proto</summary>
  public static partial class ZtLiveScMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for ZtLiveScMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ZtLiveScMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVadExpdmVTY01lc3NhZ2UucHJvdG8SCkFjRnVuRGFubXUi7AEKD1p0TGl2",
            "ZVNjTWVzc2FnZRITCgttZXNzYWdlVHlwZRgBIAEoCRJECg9jb21wcmVzc2lv",
            "blR5cGUYAiABKA4yKy5BY0Z1bkRhbm11Llp0TGl2ZVNjTWVzc2FnZS5Db21w",
            "cmVzc2lvblR5cGUSDwoHcGF5bG9hZBgDIAEoDBIOCgZsaXZlSWQYBCABKAkS",
            "DgoGdGlja2V0GAUgASgJEhkKEXNlcnZlclRpbWVzdGFtcE1zGAYgASgDIjIK",
            "D0NvbXByZXNzaW9uVHlwZRILCgdVTktOT1dOEAASCAoETk9ORRABEggKBEda",
            "SVAQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.ZtLiveScMessage), global::AcFunDanmu.ZtLiveScMessage.Parser, new[]{ "MessageType", "CompressionType", "Payload", "LiveId", "Ticket", "ServerTimestampMs" }, null, new[]{ typeof(global::AcFunDanmu.ZtLiveScMessage.Types.CompressionType) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ZtLiveScMessage : pb::IMessage<ZtLiveScMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ZtLiveScMessage> _parser = new pb::MessageParser<ZtLiveScMessage>(() => new ZtLiveScMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZtLiveScMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.ZtLiveScMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveScMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveScMessage(ZtLiveScMessage other) : this() {
      messageType_ = other.messageType_;
      compressionType_ = other.compressionType_;
      payload_ = other.payload_;
      liveId_ = other.liveId_;
      ticket_ = other.ticket_;
      serverTimestampMs_ = other.serverTimestampMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZtLiveScMessage Clone() {
      return new ZtLiveScMessage(this);
    }

    /// <summary>Field number for the "messageType" field.</summary>
    public const int MessageTypeFieldNumber = 1;
    private string messageType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageType {
      get { return messageType_; }
      set {
        messageType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "compressionType" field.</summary>
    public const int CompressionTypeFieldNumber = 2;
    private global::AcFunDanmu.ZtLiveScMessage.Types.CompressionType compressionType_ = global::AcFunDanmu.ZtLiveScMessage.Types.CompressionType.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.ZtLiveScMessage.Types.CompressionType CompressionType {
      get { return compressionType_; }
      set {
        compressionType_ = value;
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 3;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "liveId" field.</summary>
    public const int LiveIdFieldNumber = 4;
    private string liveId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LiveId {
      get { return liveId_; }
      set {
        liveId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ticket" field.</summary>
    public const int TicketFieldNumber = 5;
    private string ticket_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ticket {
      get { return ticket_; }
      set {
        ticket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serverTimestampMs" field.</summary>
    public const int ServerTimestampMsFieldNumber = 6;
    private long serverTimestampMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ServerTimestampMs {
      get { return serverTimestampMs_; }
      set {
        serverTimestampMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZtLiveScMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZtLiveScMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageType != other.MessageType) return false;
      if (CompressionType != other.CompressionType) return false;
      if (Payload != other.Payload) return false;
      if (LiveId != other.LiveId) return false;
      if (Ticket != other.Ticket) return false;
      if (ServerTimestampMs != other.ServerTimestampMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageType.Length != 0) hash ^= MessageType.GetHashCode();
      if (CompressionType != global::AcFunDanmu.ZtLiveScMessage.Types.CompressionType.Unknown) hash ^= CompressionType.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (LiveId.Length != 0) hash ^= LiveId.GetHashCode();
      if (Ticket.Length != 0) hash ^= Ticket.GetHashCode();
      if (ServerTimestampMs != 0L) hash ^= ServerTimestampMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MessageType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageType);
      }
      if (CompressionType != global::AcFunDanmu.ZtLiveScMessage.Types.CompressionType.Unknown) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CompressionType);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Payload);
      }
      if (LiveId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LiveId);
      }
      if (Ticket.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Ticket);
      }
      if (ServerTimestampMs != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ServerTimestampMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MessageType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageType);
      }
      if (CompressionType != global::AcFunDanmu.ZtLiveScMessage.Types.CompressionType.Unknown) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CompressionType);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Payload);
      }
      if (LiveId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LiveId);
      }
      if (Ticket.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Ticket);
      }
      if (ServerTimestampMs != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ServerTimestampMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageType);
      }
      if (CompressionType != global::AcFunDanmu.ZtLiveScMessage.Types.CompressionType.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CompressionType);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (LiveId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LiveId);
      }
      if (Ticket.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ticket);
      }
      if (ServerTimestampMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTimestampMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZtLiveScMessage other) {
      if (other == null) {
        return;
      }
      if (other.MessageType.Length != 0) {
        MessageType = other.MessageType;
      }
      if (other.CompressionType != global::AcFunDanmu.ZtLiveScMessage.Types.CompressionType.Unknown) {
        CompressionType = other.CompressionType;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      if (other.LiveId.Length != 0) {
        LiveId = other.LiveId;
      }
      if (other.Ticket.Length != 0) {
        Ticket = other.Ticket;
      }
      if (other.ServerTimestampMs != 0L) {
        ServerTimestampMs = other.ServerTimestampMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MessageType = input.ReadString();
            break;
          }
          case 16: {
            CompressionType = (global::AcFunDanmu.ZtLiveScMessage.Types.CompressionType) input.ReadEnum();
            break;
          }
          case 26: {
            Payload = input.ReadBytes();
            break;
          }
          case 34: {
            LiveId = input.ReadString();
            break;
          }
          case 42: {
            Ticket = input.ReadString();
            break;
          }
          case 48: {
            ServerTimestampMs = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MessageType = input.ReadString();
            break;
          }
          case 16: {
            CompressionType = (global::AcFunDanmu.ZtLiveScMessage.Types.CompressionType) input.ReadEnum();
            break;
          }
          case 26: {
            Payload = input.ReadBytes();
            break;
          }
          case 34: {
            LiveId = input.ReadString();
            break;
          }
          case 42: {
            Ticket = input.ReadString();
            break;
          }
          case 48: {
            ServerTimestampMs = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ZtLiveScMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CompressionType {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("NONE")] None = 1,
        [pbr::OriginalName("GZIP")] Gzip = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
