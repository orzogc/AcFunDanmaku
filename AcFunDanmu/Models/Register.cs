// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Register.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AcFunDanmu {

  /// <summary>Holder for reflection information generated from Register.proto</summary>
  public static partial class RegisterReflection {

    #region Descriptor
    /// <summary>File descriptor for Register.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RegisterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5SZWdpc3Rlci5wcm90bxIKQWNGdW5EYW5tdRoNQXBwSW5mby5wcm90bxoQ",
            "RGV2aWNlSW5mby5wcm90bxoNRW52SW5mby5wcm90bxoSWnRDb21tb25JbmZv",
            "LnByb3RvGhhBY2Nlc3NQb2ludHNDb25maWcucHJvdG8aFlB1c2hTZXJ2aWNl",
            "VG9rZW4ucHJvdG8aD1Nka09wdGlvbi5wcm90byKGBQoPUmVnaXN0ZXJSZXF1",
            "ZXN0EiQKB2FwcEluZm8YASABKAsyEy5BY0Z1bkRhbm11LkFwcEluZm8SKgoK",
            "ZGV2aWNlSW5mbxgCIAEoCzIWLkFjRnVuRGFubXUuRGV2aWNlSW5mbxIkCgdl",
            "bnZJbmZvGAMgASgLMhMuQWNGdW5EYW5tdS5FbnZJbmZvEkIKDnByZXNlbmNl",
            "U3RhdHVzGAQgASgOMiouQWNGdW5EYW5tdS5SZWdpc3RlclJlcXVlc3QuUHJl",
            "c2VuY2VTdGF0dXMSQQoPYXBwQWN0aXZlU3RhdHVzGAUgASgOMiguQWNGdW5E",
            "YW5tdS5SZWdpc3RlclJlcXVlc3QuQWN0aXZlU3RhdHVzEhcKD2FwcEN1c3Rv",
            "bVN0YXR1cxgGIAEoDBI2ChBwdXNoU2VydmljZVRva2VuGAcgASgLMhwuQWNG",
            "dW5EYW5tdS5QdXNoU2VydmljZVRva2VuEhIKCmluc3RhbmNlSWQYCCABKAMS",
            "OgoUcHVzaFNlcnZpY2VUb2tlbkxpc3QYCSADKAsyHC5BY0Z1bkRhbm11LlB1",
            "c2hTZXJ2aWNlVG9rZW4SHAoUa2VlcGFsaXZlSW50ZXJ2YWxTZWMYCiABKAUS",
            "LgoMenRDb21tb25JbmZvGAsgASgLMhguQWNGdW5EYW5tdS5adENvbW1vbklu",
            "Zm8iOwoOUHJlc2VuY2VTdGF0dXMSFAoQa1ByZXNlbmNlT2ZmbGluZRAAEhMK",
            "D2tQcmVzZW5jZU9ubGluZRABIkgKDEFjdGl2ZVN0YXR1cxIMCghrSW52YWxp",
            "ZBAAEhQKEGtBcHBJbkZvcmVncm91bmQQARIUChBrQXBwSW5CYWNrZ3JvdW5k",
            "EAIi8AMKEFJlZ2lzdGVyUmVzcG9uc2USOgoSYWNjZXNzUG9pbnRzQ29uZmln",
            "GAEgASgLMh4uQWNGdW5EYW5tdS5BY2Nlc3NQb2ludHNDb25maWcSDwoHc2Vz",
            "c0tleRgCIAEoDBISCgppbnN0YW5jZUlkGAMgASgDEigKCXNka09wdGlvbhgE",
            "IAEoCzIVLkFjRnVuRGFubXUuU2RrT3B0aW9uEj4KFmFjY2Vzc1BvaW50c0Nv",
            "bmZpZ0lwdjYYBSABKAsyHi5BY0Z1bkRhbm11LkFjY2Vzc1BvaW50c0NvbmZp",
            "ZxI+ChZhY2Nlc3NQb2ludHNDb25maWdRVWljGAYgASgLMh4uQWNGdW5EYW5t",
            "dS5BY2Nlc3NQb2ludHNDb25maWcSQgoaYWNjZXNzUG9pbnRzQ29uZmlnUXVp",
            "Y0lwdjYYByABKAsyHi5BY0Z1bkRhbm11LkFjY2Vzc1BvaW50c0NvbmZpZxIY",
            "ChBjbGVhbkFjY2Vzc1BvaW50GAggASgIEhoKEmZsb3dDb3N0U2FtcGxlUmF0",
            "ZRgJIAEoAhIZChFjb21tYW5kU2FtcGxlUmF0ZRgKIAEoAhI8ChRhY2Nlc3NQ",
            "b2ludHNDb25maWdXcxgLIAEoCzIeLkFjRnVuRGFubXUuQWNjZXNzUG9pbnRz",
            "Q29uZmlnYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AcFunDanmu.AppInfoReflection.Descriptor, global::AcFunDanmu.DeviceInfoReflection.Descriptor, global::AcFunDanmu.EnvInfoReflection.Descriptor, global::AcFunDanmu.ZtCommonInfoReflection.Descriptor, global::AcFunDanmu.AccessPointsConfigReflection.Descriptor, global::AcFunDanmu.PushServiceTokenReflection.Descriptor, global::AcFunDanmu.SdkOptionReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.RegisterRequest), global::AcFunDanmu.RegisterRequest.Parser, new[]{ "AppInfo", "DeviceInfo", "EnvInfo", "PresenceStatus", "AppActiveStatus", "AppCustomStatus", "PushServiceToken", "InstanceId", "PushServiceTokenList", "KeepaliveIntervalSec", "ZtCommonInfo" }, null, new[]{ typeof(global::AcFunDanmu.RegisterRequest.Types.PresenceStatus), typeof(global::AcFunDanmu.RegisterRequest.Types.ActiveStatus) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.RegisterResponse), global::AcFunDanmu.RegisterResponse.Parser, new[]{ "AccessPointsConfig", "SessKey", "InstanceId", "SdkOption", "AccessPointsConfigIpv6", "AccessPointsConfigQUic", "AccessPointsConfigQuicIpv6", "CleanAccessPoint", "FlowCostSampleRate", "CommandSampleRate", "AccessPointsConfigWs" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RegisterRequest : pb::IMessage<RegisterRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RegisterRequest> _parser = new pb::MessageParser<RegisterRequest>(() => new RegisterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.RegisterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterRequest(RegisterRequest other) : this() {
      appInfo_ = other.appInfo_ != null ? other.appInfo_.Clone() : null;
      deviceInfo_ = other.deviceInfo_ != null ? other.deviceInfo_.Clone() : null;
      envInfo_ = other.envInfo_ != null ? other.envInfo_.Clone() : null;
      presenceStatus_ = other.presenceStatus_;
      appActiveStatus_ = other.appActiveStatus_;
      appCustomStatus_ = other.appCustomStatus_;
      pushServiceToken_ = other.pushServiceToken_ != null ? other.pushServiceToken_.Clone() : null;
      instanceId_ = other.instanceId_;
      pushServiceTokenList_ = other.pushServiceTokenList_.Clone();
      keepaliveIntervalSec_ = other.keepaliveIntervalSec_;
      ztCommonInfo_ = other.ztCommonInfo_ != null ? other.ztCommonInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterRequest Clone() {
      return new RegisterRequest(this);
    }

    /// <summary>Field number for the "appInfo" field.</summary>
    public const int AppInfoFieldNumber = 1;
    private global::AcFunDanmu.AppInfo appInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.AppInfo AppInfo {
      get { return appInfo_; }
      set {
        appInfo_ = value;
      }
    }

    /// <summary>Field number for the "deviceInfo" field.</summary>
    public const int DeviceInfoFieldNumber = 2;
    private global::AcFunDanmu.DeviceInfo deviceInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.DeviceInfo DeviceInfo {
      get { return deviceInfo_; }
      set {
        deviceInfo_ = value;
      }
    }

    /// <summary>Field number for the "envInfo" field.</summary>
    public const int EnvInfoFieldNumber = 3;
    private global::AcFunDanmu.EnvInfo envInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.EnvInfo EnvInfo {
      get { return envInfo_; }
      set {
        envInfo_ = value;
      }
    }

    /// <summary>Field number for the "presenceStatus" field.</summary>
    public const int PresenceStatusFieldNumber = 4;
    private global::AcFunDanmu.RegisterRequest.Types.PresenceStatus presenceStatus_ = global::AcFunDanmu.RegisterRequest.Types.PresenceStatus.KPresenceOffline;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.RegisterRequest.Types.PresenceStatus PresenceStatus {
      get { return presenceStatus_; }
      set {
        presenceStatus_ = value;
      }
    }

    /// <summary>Field number for the "appActiveStatus" field.</summary>
    public const int AppActiveStatusFieldNumber = 5;
    private global::AcFunDanmu.RegisterRequest.Types.ActiveStatus appActiveStatus_ = global::AcFunDanmu.RegisterRequest.Types.ActiveStatus.KInvalid;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.RegisterRequest.Types.ActiveStatus AppActiveStatus {
      get { return appActiveStatus_; }
      set {
        appActiveStatus_ = value;
      }
    }

    /// <summary>Field number for the "appCustomStatus" field.</summary>
    public const int AppCustomStatusFieldNumber = 6;
    private pb::ByteString appCustomStatus_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AppCustomStatus {
      get { return appCustomStatus_; }
      set {
        appCustomStatus_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pushServiceToken" field.</summary>
    public const int PushServiceTokenFieldNumber = 7;
    private global::AcFunDanmu.PushServiceToken pushServiceToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.PushServiceToken PushServiceToken {
      get { return pushServiceToken_; }
      set {
        pushServiceToken_ = value;
      }
    }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 8;
    private long instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "pushServiceTokenList" field.</summary>
    public const int PushServiceTokenListFieldNumber = 9;
    private static readonly pb::FieldCodec<global::AcFunDanmu.PushServiceToken> _repeated_pushServiceTokenList_codec
        = pb::FieldCodec.ForMessage(74, global::AcFunDanmu.PushServiceToken.Parser);
    private readonly pbc::RepeatedField<global::AcFunDanmu.PushServiceToken> pushServiceTokenList_ = new pbc::RepeatedField<global::AcFunDanmu.PushServiceToken>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AcFunDanmu.PushServiceToken> PushServiceTokenList {
      get { return pushServiceTokenList_; }
    }

    /// <summary>Field number for the "keepaliveIntervalSec" field.</summary>
    public const int KeepaliveIntervalSecFieldNumber = 10;
    private int keepaliveIntervalSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeepaliveIntervalSec {
      get { return keepaliveIntervalSec_; }
      set {
        keepaliveIntervalSec_ = value;
      }
    }

    /// <summary>Field number for the "ztCommonInfo" field.</summary>
    public const int ZtCommonInfoFieldNumber = 11;
    private global::AcFunDanmu.ZtCommonInfo ztCommonInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.ZtCommonInfo ZtCommonInfo {
      get { return ztCommonInfo_; }
      set {
        ztCommonInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AppInfo, other.AppInfo)) return false;
      if (!object.Equals(DeviceInfo, other.DeviceInfo)) return false;
      if (!object.Equals(EnvInfo, other.EnvInfo)) return false;
      if (PresenceStatus != other.PresenceStatus) return false;
      if (AppActiveStatus != other.AppActiveStatus) return false;
      if (AppCustomStatus != other.AppCustomStatus) return false;
      if (!object.Equals(PushServiceToken, other.PushServiceToken)) return false;
      if (InstanceId != other.InstanceId) return false;
      if(!pushServiceTokenList_.Equals(other.pushServiceTokenList_)) return false;
      if (KeepaliveIntervalSec != other.KeepaliveIntervalSec) return false;
      if (!object.Equals(ZtCommonInfo, other.ZtCommonInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (appInfo_ != null) hash ^= AppInfo.GetHashCode();
      if (deviceInfo_ != null) hash ^= DeviceInfo.GetHashCode();
      if (envInfo_ != null) hash ^= EnvInfo.GetHashCode();
      if (PresenceStatus != global::AcFunDanmu.RegisterRequest.Types.PresenceStatus.KPresenceOffline) hash ^= PresenceStatus.GetHashCode();
      if (AppActiveStatus != global::AcFunDanmu.RegisterRequest.Types.ActiveStatus.KInvalid) hash ^= AppActiveStatus.GetHashCode();
      if (AppCustomStatus.Length != 0) hash ^= AppCustomStatus.GetHashCode();
      if (pushServiceToken_ != null) hash ^= PushServiceToken.GetHashCode();
      if (InstanceId != 0L) hash ^= InstanceId.GetHashCode();
      hash ^= pushServiceTokenList_.GetHashCode();
      if (KeepaliveIntervalSec != 0) hash ^= KeepaliveIntervalSec.GetHashCode();
      if (ztCommonInfo_ != null) hash ^= ZtCommonInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (appInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AppInfo);
      }
      if (deviceInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DeviceInfo);
      }
      if (envInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EnvInfo);
      }
      if (PresenceStatus != global::AcFunDanmu.RegisterRequest.Types.PresenceStatus.KPresenceOffline) {
        output.WriteRawTag(32);
        output.WriteEnum((int) PresenceStatus);
      }
      if (AppActiveStatus != global::AcFunDanmu.RegisterRequest.Types.ActiveStatus.KInvalid) {
        output.WriteRawTag(40);
        output.WriteEnum((int) AppActiveStatus);
      }
      if (AppCustomStatus.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(AppCustomStatus);
      }
      if (pushServiceToken_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PushServiceToken);
      }
      if (InstanceId != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(InstanceId);
      }
      pushServiceTokenList_.WriteTo(output, _repeated_pushServiceTokenList_codec);
      if (KeepaliveIntervalSec != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(KeepaliveIntervalSec);
      }
      if (ztCommonInfo_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(ZtCommonInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (appInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AppInfo);
      }
      if (deviceInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DeviceInfo);
      }
      if (envInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EnvInfo);
      }
      if (PresenceStatus != global::AcFunDanmu.RegisterRequest.Types.PresenceStatus.KPresenceOffline) {
        output.WriteRawTag(32);
        output.WriteEnum((int) PresenceStatus);
      }
      if (AppActiveStatus != global::AcFunDanmu.RegisterRequest.Types.ActiveStatus.KInvalid) {
        output.WriteRawTag(40);
        output.WriteEnum((int) AppActiveStatus);
      }
      if (AppCustomStatus.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(AppCustomStatus);
      }
      if (pushServiceToken_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PushServiceToken);
      }
      if (InstanceId != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(InstanceId);
      }
      pushServiceTokenList_.WriteTo(ref output, _repeated_pushServiceTokenList_codec);
      if (KeepaliveIntervalSec != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(KeepaliveIntervalSec);
      }
      if (ztCommonInfo_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(ZtCommonInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (appInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AppInfo);
      }
      if (deviceInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceInfo);
      }
      if (envInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnvInfo);
      }
      if (PresenceStatus != global::AcFunDanmu.RegisterRequest.Types.PresenceStatus.KPresenceOffline) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PresenceStatus);
      }
      if (AppActiveStatus != global::AcFunDanmu.RegisterRequest.Types.ActiveStatus.KInvalid) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AppActiveStatus);
      }
      if (AppCustomStatus.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AppCustomStatus);
      }
      if (pushServiceToken_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PushServiceToken);
      }
      if (InstanceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InstanceId);
      }
      size += pushServiceTokenList_.CalculateSize(_repeated_pushServiceTokenList_codec);
      if (KeepaliveIntervalSec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeepaliveIntervalSec);
      }
      if (ztCommonInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ZtCommonInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterRequest other) {
      if (other == null) {
        return;
      }
      if (other.appInfo_ != null) {
        if (appInfo_ == null) {
          AppInfo = new global::AcFunDanmu.AppInfo();
        }
        AppInfo.MergeFrom(other.AppInfo);
      }
      if (other.deviceInfo_ != null) {
        if (deviceInfo_ == null) {
          DeviceInfo = new global::AcFunDanmu.DeviceInfo();
        }
        DeviceInfo.MergeFrom(other.DeviceInfo);
      }
      if (other.envInfo_ != null) {
        if (envInfo_ == null) {
          EnvInfo = new global::AcFunDanmu.EnvInfo();
        }
        EnvInfo.MergeFrom(other.EnvInfo);
      }
      if (other.PresenceStatus != global::AcFunDanmu.RegisterRequest.Types.PresenceStatus.KPresenceOffline) {
        PresenceStatus = other.PresenceStatus;
      }
      if (other.AppActiveStatus != global::AcFunDanmu.RegisterRequest.Types.ActiveStatus.KInvalid) {
        AppActiveStatus = other.AppActiveStatus;
      }
      if (other.AppCustomStatus.Length != 0) {
        AppCustomStatus = other.AppCustomStatus;
      }
      if (other.pushServiceToken_ != null) {
        if (pushServiceToken_ == null) {
          PushServiceToken = new global::AcFunDanmu.PushServiceToken();
        }
        PushServiceToken.MergeFrom(other.PushServiceToken);
      }
      if (other.InstanceId != 0L) {
        InstanceId = other.InstanceId;
      }
      pushServiceTokenList_.Add(other.pushServiceTokenList_);
      if (other.KeepaliveIntervalSec != 0) {
        KeepaliveIntervalSec = other.KeepaliveIntervalSec;
      }
      if (other.ztCommonInfo_ != null) {
        if (ztCommonInfo_ == null) {
          ZtCommonInfo = new global::AcFunDanmu.ZtCommonInfo();
        }
        ZtCommonInfo.MergeFrom(other.ZtCommonInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (appInfo_ == null) {
              AppInfo = new global::AcFunDanmu.AppInfo();
            }
            input.ReadMessage(AppInfo);
            break;
          }
          case 18: {
            if (deviceInfo_ == null) {
              DeviceInfo = new global::AcFunDanmu.DeviceInfo();
            }
            input.ReadMessage(DeviceInfo);
            break;
          }
          case 26: {
            if (envInfo_ == null) {
              EnvInfo = new global::AcFunDanmu.EnvInfo();
            }
            input.ReadMessage(EnvInfo);
            break;
          }
          case 32: {
            PresenceStatus = (global::AcFunDanmu.RegisterRequest.Types.PresenceStatus) input.ReadEnum();
            break;
          }
          case 40: {
            AppActiveStatus = (global::AcFunDanmu.RegisterRequest.Types.ActiveStatus) input.ReadEnum();
            break;
          }
          case 50: {
            AppCustomStatus = input.ReadBytes();
            break;
          }
          case 58: {
            if (pushServiceToken_ == null) {
              PushServiceToken = new global::AcFunDanmu.PushServiceToken();
            }
            input.ReadMessage(PushServiceToken);
            break;
          }
          case 64: {
            InstanceId = input.ReadInt64();
            break;
          }
          case 74: {
            pushServiceTokenList_.AddEntriesFrom(input, _repeated_pushServiceTokenList_codec);
            break;
          }
          case 80: {
            KeepaliveIntervalSec = input.ReadInt32();
            break;
          }
          case 90: {
            if (ztCommonInfo_ == null) {
              ZtCommonInfo = new global::AcFunDanmu.ZtCommonInfo();
            }
            input.ReadMessage(ZtCommonInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (appInfo_ == null) {
              AppInfo = new global::AcFunDanmu.AppInfo();
            }
            input.ReadMessage(AppInfo);
            break;
          }
          case 18: {
            if (deviceInfo_ == null) {
              DeviceInfo = new global::AcFunDanmu.DeviceInfo();
            }
            input.ReadMessage(DeviceInfo);
            break;
          }
          case 26: {
            if (envInfo_ == null) {
              EnvInfo = new global::AcFunDanmu.EnvInfo();
            }
            input.ReadMessage(EnvInfo);
            break;
          }
          case 32: {
            PresenceStatus = (global::AcFunDanmu.RegisterRequest.Types.PresenceStatus) input.ReadEnum();
            break;
          }
          case 40: {
            AppActiveStatus = (global::AcFunDanmu.RegisterRequest.Types.ActiveStatus) input.ReadEnum();
            break;
          }
          case 50: {
            AppCustomStatus = input.ReadBytes();
            break;
          }
          case 58: {
            if (pushServiceToken_ == null) {
              PushServiceToken = new global::AcFunDanmu.PushServiceToken();
            }
            input.ReadMessage(PushServiceToken);
            break;
          }
          case 64: {
            InstanceId = input.ReadInt64();
            break;
          }
          case 74: {
            pushServiceTokenList_.AddEntriesFrom(ref input, _repeated_pushServiceTokenList_codec);
            break;
          }
          case 80: {
            KeepaliveIntervalSec = input.ReadInt32();
            break;
          }
          case 90: {
            if (ztCommonInfo_ == null) {
              ZtCommonInfo = new global::AcFunDanmu.ZtCommonInfo();
            }
            input.ReadMessage(ZtCommonInfo);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the RegisterRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum PresenceStatus {
        [pbr::OriginalName("kPresenceOffline")] KPresenceOffline = 0,
        [pbr::OriginalName("kPresenceOnline")] KPresenceOnline = 1,
      }

      public enum ActiveStatus {
        [pbr::OriginalName("kInvalid")] KInvalid = 0,
        [pbr::OriginalName("kAppInForeground")] KAppInForeground = 1,
        [pbr::OriginalName("kAppInBackground")] KAppInBackground = 2,
      }

    }
    #endregion

  }

  public sealed partial class RegisterResponse : pb::IMessage<RegisterResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RegisterResponse> _parser = new pb::MessageParser<RegisterResponse>(() => new RegisterResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.RegisterReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterResponse(RegisterResponse other) : this() {
      accessPointsConfig_ = other.accessPointsConfig_ != null ? other.accessPointsConfig_.Clone() : null;
      sessKey_ = other.sessKey_;
      instanceId_ = other.instanceId_;
      sdkOption_ = other.sdkOption_ != null ? other.sdkOption_.Clone() : null;
      accessPointsConfigIpv6_ = other.accessPointsConfigIpv6_ != null ? other.accessPointsConfigIpv6_.Clone() : null;
      accessPointsConfigQUic_ = other.accessPointsConfigQUic_ != null ? other.accessPointsConfigQUic_.Clone() : null;
      accessPointsConfigQuicIpv6_ = other.accessPointsConfigQuicIpv6_ != null ? other.accessPointsConfigQuicIpv6_.Clone() : null;
      cleanAccessPoint_ = other.cleanAccessPoint_;
      flowCostSampleRate_ = other.flowCostSampleRate_;
      commandSampleRate_ = other.commandSampleRate_;
      accessPointsConfigWs_ = other.accessPointsConfigWs_ != null ? other.accessPointsConfigWs_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterResponse Clone() {
      return new RegisterResponse(this);
    }

    /// <summary>Field number for the "accessPointsConfig" field.</summary>
    public const int AccessPointsConfigFieldNumber = 1;
    private global::AcFunDanmu.AccessPointsConfig accessPointsConfig_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.AccessPointsConfig AccessPointsConfig {
      get { return accessPointsConfig_; }
      set {
        accessPointsConfig_ = value;
      }
    }

    /// <summary>Field number for the "sessKey" field.</summary>
    public const int SessKeyFieldNumber = 2;
    private pb::ByteString sessKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SessKey {
      get { return sessKey_; }
      set {
        sessKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instanceId" field.</summary>
    public const int InstanceIdFieldNumber = 3;
    private long instanceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = value;
      }
    }

    /// <summary>Field number for the "sdkOption" field.</summary>
    public const int SdkOptionFieldNumber = 4;
    private global::AcFunDanmu.SdkOption sdkOption_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.SdkOption SdkOption {
      get { return sdkOption_; }
      set {
        sdkOption_ = value;
      }
    }

    /// <summary>Field number for the "accessPointsConfigIpv6" field.</summary>
    public const int AccessPointsConfigIpv6FieldNumber = 5;
    private global::AcFunDanmu.AccessPointsConfig accessPointsConfigIpv6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.AccessPointsConfig AccessPointsConfigIpv6 {
      get { return accessPointsConfigIpv6_; }
      set {
        accessPointsConfigIpv6_ = value;
      }
    }

    /// <summary>Field number for the "accessPointsConfigQUic" field.</summary>
    public const int AccessPointsConfigQUicFieldNumber = 6;
    private global::AcFunDanmu.AccessPointsConfig accessPointsConfigQUic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.AccessPointsConfig AccessPointsConfigQUic {
      get { return accessPointsConfigQUic_; }
      set {
        accessPointsConfigQUic_ = value;
      }
    }

    /// <summary>Field number for the "accessPointsConfigQuicIpv6" field.</summary>
    public const int AccessPointsConfigQuicIpv6FieldNumber = 7;
    private global::AcFunDanmu.AccessPointsConfig accessPointsConfigQuicIpv6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.AccessPointsConfig AccessPointsConfigQuicIpv6 {
      get { return accessPointsConfigQuicIpv6_; }
      set {
        accessPointsConfigQuicIpv6_ = value;
      }
    }

    /// <summary>Field number for the "cleanAccessPoint" field.</summary>
    public const int CleanAccessPointFieldNumber = 8;
    private bool cleanAccessPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CleanAccessPoint {
      get { return cleanAccessPoint_; }
      set {
        cleanAccessPoint_ = value;
      }
    }

    /// <summary>Field number for the "flowCostSampleRate" field.</summary>
    public const int FlowCostSampleRateFieldNumber = 9;
    private float flowCostSampleRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FlowCostSampleRate {
      get { return flowCostSampleRate_; }
      set {
        flowCostSampleRate_ = value;
      }
    }

    /// <summary>Field number for the "commandSampleRate" field.</summary>
    public const int CommandSampleRateFieldNumber = 10;
    private float commandSampleRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CommandSampleRate {
      get { return commandSampleRate_; }
      set {
        commandSampleRate_ = value;
      }
    }

    /// <summary>Field number for the "accessPointsConfigWs" field.</summary>
    public const int AccessPointsConfigWsFieldNumber = 11;
    private global::AcFunDanmu.AccessPointsConfig accessPointsConfigWs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AcFunDanmu.AccessPointsConfig AccessPointsConfigWs {
      get { return accessPointsConfigWs_; }
      set {
        accessPointsConfigWs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(AccessPointsConfig, other.AccessPointsConfig)) return false;
      if (SessKey != other.SessKey) return false;
      if (InstanceId != other.InstanceId) return false;
      if (!object.Equals(SdkOption, other.SdkOption)) return false;
      if (!object.Equals(AccessPointsConfigIpv6, other.AccessPointsConfigIpv6)) return false;
      if (!object.Equals(AccessPointsConfigQUic, other.AccessPointsConfigQUic)) return false;
      if (!object.Equals(AccessPointsConfigQuicIpv6, other.AccessPointsConfigQuicIpv6)) return false;
      if (CleanAccessPoint != other.CleanAccessPoint) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FlowCostSampleRate, other.FlowCostSampleRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CommandSampleRate, other.CommandSampleRate)) return false;
      if (!object.Equals(AccessPointsConfigWs, other.AccessPointsConfigWs)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (accessPointsConfig_ != null) hash ^= AccessPointsConfig.GetHashCode();
      if (SessKey.Length != 0) hash ^= SessKey.GetHashCode();
      if (InstanceId != 0L) hash ^= InstanceId.GetHashCode();
      if (sdkOption_ != null) hash ^= SdkOption.GetHashCode();
      if (accessPointsConfigIpv6_ != null) hash ^= AccessPointsConfigIpv6.GetHashCode();
      if (accessPointsConfigQUic_ != null) hash ^= AccessPointsConfigQUic.GetHashCode();
      if (accessPointsConfigQuicIpv6_ != null) hash ^= AccessPointsConfigQuicIpv6.GetHashCode();
      if (CleanAccessPoint != false) hash ^= CleanAccessPoint.GetHashCode();
      if (FlowCostSampleRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FlowCostSampleRate);
      if (CommandSampleRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CommandSampleRate);
      if (accessPointsConfigWs_ != null) hash ^= AccessPointsConfigWs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (accessPointsConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AccessPointsConfig);
      }
      if (SessKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SessKey);
      }
      if (InstanceId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(InstanceId);
      }
      if (sdkOption_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SdkOption);
      }
      if (accessPointsConfigIpv6_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AccessPointsConfigIpv6);
      }
      if (accessPointsConfigQUic_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(AccessPointsConfigQUic);
      }
      if (accessPointsConfigQuicIpv6_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(AccessPointsConfigQuicIpv6);
      }
      if (CleanAccessPoint != false) {
        output.WriteRawTag(64);
        output.WriteBool(CleanAccessPoint);
      }
      if (FlowCostSampleRate != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(FlowCostSampleRate);
      }
      if (CommandSampleRate != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(CommandSampleRate);
      }
      if (accessPointsConfigWs_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(AccessPointsConfigWs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (accessPointsConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(AccessPointsConfig);
      }
      if (SessKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SessKey);
      }
      if (InstanceId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(InstanceId);
      }
      if (sdkOption_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SdkOption);
      }
      if (accessPointsConfigIpv6_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AccessPointsConfigIpv6);
      }
      if (accessPointsConfigQUic_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(AccessPointsConfigQUic);
      }
      if (accessPointsConfigQuicIpv6_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(AccessPointsConfigQuicIpv6);
      }
      if (CleanAccessPoint != false) {
        output.WriteRawTag(64);
        output.WriteBool(CleanAccessPoint);
      }
      if (FlowCostSampleRate != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(FlowCostSampleRate);
      }
      if (CommandSampleRate != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(CommandSampleRate);
      }
      if (accessPointsConfigWs_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(AccessPointsConfigWs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (accessPointsConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccessPointsConfig);
      }
      if (SessKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SessKey);
      }
      if (InstanceId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InstanceId);
      }
      if (sdkOption_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SdkOption);
      }
      if (accessPointsConfigIpv6_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccessPointsConfigIpv6);
      }
      if (accessPointsConfigQUic_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccessPointsConfigQUic);
      }
      if (accessPointsConfigQuicIpv6_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccessPointsConfigQuicIpv6);
      }
      if (CleanAccessPoint != false) {
        size += 1 + 1;
      }
      if (FlowCostSampleRate != 0F) {
        size += 1 + 4;
      }
      if (CommandSampleRate != 0F) {
        size += 1 + 4;
      }
      if (accessPointsConfigWs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccessPointsConfigWs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterResponse other) {
      if (other == null) {
        return;
      }
      if (other.accessPointsConfig_ != null) {
        if (accessPointsConfig_ == null) {
          AccessPointsConfig = new global::AcFunDanmu.AccessPointsConfig();
        }
        AccessPointsConfig.MergeFrom(other.AccessPointsConfig);
      }
      if (other.SessKey.Length != 0) {
        SessKey = other.SessKey;
      }
      if (other.InstanceId != 0L) {
        InstanceId = other.InstanceId;
      }
      if (other.sdkOption_ != null) {
        if (sdkOption_ == null) {
          SdkOption = new global::AcFunDanmu.SdkOption();
        }
        SdkOption.MergeFrom(other.SdkOption);
      }
      if (other.accessPointsConfigIpv6_ != null) {
        if (accessPointsConfigIpv6_ == null) {
          AccessPointsConfigIpv6 = new global::AcFunDanmu.AccessPointsConfig();
        }
        AccessPointsConfigIpv6.MergeFrom(other.AccessPointsConfigIpv6);
      }
      if (other.accessPointsConfigQUic_ != null) {
        if (accessPointsConfigQUic_ == null) {
          AccessPointsConfigQUic = new global::AcFunDanmu.AccessPointsConfig();
        }
        AccessPointsConfigQUic.MergeFrom(other.AccessPointsConfigQUic);
      }
      if (other.accessPointsConfigQuicIpv6_ != null) {
        if (accessPointsConfigQuicIpv6_ == null) {
          AccessPointsConfigQuicIpv6 = new global::AcFunDanmu.AccessPointsConfig();
        }
        AccessPointsConfigQuicIpv6.MergeFrom(other.AccessPointsConfigQuicIpv6);
      }
      if (other.CleanAccessPoint != false) {
        CleanAccessPoint = other.CleanAccessPoint;
      }
      if (other.FlowCostSampleRate != 0F) {
        FlowCostSampleRate = other.FlowCostSampleRate;
      }
      if (other.CommandSampleRate != 0F) {
        CommandSampleRate = other.CommandSampleRate;
      }
      if (other.accessPointsConfigWs_ != null) {
        if (accessPointsConfigWs_ == null) {
          AccessPointsConfigWs = new global::AcFunDanmu.AccessPointsConfig();
        }
        AccessPointsConfigWs.MergeFrom(other.AccessPointsConfigWs);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (accessPointsConfig_ == null) {
              AccessPointsConfig = new global::AcFunDanmu.AccessPointsConfig();
            }
            input.ReadMessage(AccessPointsConfig);
            break;
          }
          case 18: {
            SessKey = input.ReadBytes();
            break;
          }
          case 24: {
            InstanceId = input.ReadInt64();
            break;
          }
          case 34: {
            if (sdkOption_ == null) {
              SdkOption = new global::AcFunDanmu.SdkOption();
            }
            input.ReadMessage(SdkOption);
            break;
          }
          case 42: {
            if (accessPointsConfigIpv6_ == null) {
              AccessPointsConfigIpv6 = new global::AcFunDanmu.AccessPointsConfig();
            }
            input.ReadMessage(AccessPointsConfigIpv6);
            break;
          }
          case 50: {
            if (accessPointsConfigQUic_ == null) {
              AccessPointsConfigQUic = new global::AcFunDanmu.AccessPointsConfig();
            }
            input.ReadMessage(AccessPointsConfigQUic);
            break;
          }
          case 58: {
            if (accessPointsConfigQuicIpv6_ == null) {
              AccessPointsConfigQuicIpv6 = new global::AcFunDanmu.AccessPointsConfig();
            }
            input.ReadMessage(AccessPointsConfigQuicIpv6);
            break;
          }
          case 64: {
            CleanAccessPoint = input.ReadBool();
            break;
          }
          case 77: {
            FlowCostSampleRate = input.ReadFloat();
            break;
          }
          case 85: {
            CommandSampleRate = input.ReadFloat();
            break;
          }
          case 90: {
            if (accessPointsConfigWs_ == null) {
              AccessPointsConfigWs = new global::AcFunDanmu.AccessPointsConfig();
            }
            input.ReadMessage(AccessPointsConfigWs);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (accessPointsConfig_ == null) {
              AccessPointsConfig = new global::AcFunDanmu.AccessPointsConfig();
            }
            input.ReadMessage(AccessPointsConfig);
            break;
          }
          case 18: {
            SessKey = input.ReadBytes();
            break;
          }
          case 24: {
            InstanceId = input.ReadInt64();
            break;
          }
          case 34: {
            if (sdkOption_ == null) {
              SdkOption = new global::AcFunDanmu.SdkOption();
            }
            input.ReadMessage(SdkOption);
            break;
          }
          case 42: {
            if (accessPointsConfigIpv6_ == null) {
              AccessPointsConfigIpv6 = new global::AcFunDanmu.AccessPointsConfig();
            }
            input.ReadMessage(AccessPointsConfigIpv6);
            break;
          }
          case 50: {
            if (accessPointsConfigQUic_ == null) {
              AccessPointsConfigQUic = new global::AcFunDanmu.AccessPointsConfig();
            }
            input.ReadMessage(AccessPointsConfigQUic);
            break;
          }
          case 58: {
            if (accessPointsConfigQuicIpv6_ == null) {
              AccessPointsConfigQuicIpv6 = new global::AcFunDanmu.AccessPointsConfig();
            }
            input.ReadMessage(AccessPointsConfigQuicIpv6);
            break;
          }
          case 64: {
            CleanAccessPoint = input.ReadBool();
            break;
          }
          case 77: {
            FlowCostSampleRate = input.ReadFloat();
            break;
          }
          case 85: {
            CommandSampleRate = input.ReadFloat();
            break;
          }
          case 90: {
            if (accessPointsConfigWs_ == null) {
              AccessPointsConfigWs = new global::AcFunDanmu.AccessPointsConfig();
            }
            input.ReadMessage(AccessPointsConfigWs);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
