// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: CommonActionSignalRichText.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AcFunDanmu {

  /// <summary>Holder for reflection information generated from CommonActionSignalRichText.proto</summary>
  public static partial class CommonActionSignalRichTextReflection {

    #region Descriptor
    /// <summary>File descriptor for CommonActionSignalRichText.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonActionSignalRichTextReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBDb21tb25BY3Rpb25TaWduYWxSaWNoVGV4dC5wcm90bxIKQWNGdW5EYW5t",
            "dRoUWnRMaXZlVXNlckluZm8ucHJvdG8aEkltYWdlQ2RuTm9kZS5wcm90byLZ",
            "BAoaQ29tbW9uQWN0aW9uU2lnbmFsUmljaFRleHQSSAoIc2VnbWVudHMYASAD",
            "KAsyNi5BY0Z1bkRhbm11LkNvbW1vbkFjdGlvblNpZ25hbFJpY2hUZXh0LlJp",
            "Y2hUZXh0U2VnbWVudBISCgpzZW5kVGltZU1zGAIgASgDGm0KDEltYWdlU2Vn",
            "bWVudBIqCghwaWN0dXJlcxgBIAMoCzIYLkFjRnVuRGFubXUuSW1hZ2VDZG5O",
            "b2RlEhcKD2FsdGVybmF0aXZlVGV4dBgCIAEoCRIYChBhbHRlcm5hdGl2ZUNv",
            "bG9yGAMgASgJGisKDFBsYWluU2VnbWVudBIMCgR0ZXh0GAEgASgJEg0KBWNv",
            "bG9yGAIgASgJGvQBCg9SaWNoVGV4dFNlZ21lbnQSSgoIdXNlckluZm8YASAB",
            "KAsyNi5BY0Z1bkRhbm11LkNvbW1vbkFjdGlvblNpZ25hbFJpY2hUZXh0LlVz",
            "ZXJJbmZvU2VnbWVudEgAEkQKBXBsYWluGAIgASgLMjMuQWNGdW5EYW5tdS5D",
            "b21tb25BY3Rpb25TaWduYWxSaWNoVGV4dC5QbGFpblNlZ21lbnRIABJECgVp",
            "bWFnZRgDIAEoCzIzLkFjRnVuRGFubXUuQ29tbW9uQWN0aW9uU2lnbmFsUmlj",
            "aFRleHQuSW1hZ2VTZWdtZW50SABCCQoHc2VnbWVudBpKCg9Vc2VySW5mb1Nl",
            "Z21lbnQSKAoEdXNlchgBIAEoCzIaLkFjRnVuRGFubXUuWnRMaXZlVXNlcklu",
            "Zm8SDQoFY29sb3IYAiABKAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AcFunDanmu.ZtLiveUserInfoReflection.Descriptor, global::AcFunDanmu.ImageCdnNodeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonActionSignalRichText), global::AcFunDanmu.CommonActionSignalRichText.Parser, new[]{ "Segments", "SendTimeMs" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonActionSignalRichText.Types.ImageSegment), global::AcFunDanmu.CommonActionSignalRichText.Types.ImageSegment.Parser, new[]{ "Pictures", "AlternativeText", "AlternativeColor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonActionSignalRichText.Types.PlainSegment), global::AcFunDanmu.CommonActionSignalRichText.Types.PlainSegment.Parser, new[]{ "Text", "Color" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonActionSignalRichText.Types.RichTextSegment), global::AcFunDanmu.CommonActionSignalRichText.Types.RichTextSegment.Parser, new[]{ "UserInfo", "Plain", "Image" }, new[]{ "Segment" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AcFunDanmu.CommonActionSignalRichText.Types.UserInfoSegment), global::AcFunDanmu.CommonActionSignalRichText.Types.UserInfoSegment.Parser, new[]{ "User", "Color" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CommonActionSignalRichText : pb::IMessage<CommonActionSignalRichText>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CommonActionSignalRichText> _parser = new pb::MessageParser<CommonActionSignalRichText>(() => new CommonActionSignalRichText());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommonActionSignalRichText> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AcFunDanmu.CommonActionSignalRichTextReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonActionSignalRichText() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonActionSignalRichText(CommonActionSignalRichText other) : this() {
      segments_ = other.segments_.Clone();
      sendTimeMs_ = other.sendTimeMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommonActionSignalRichText Clone() {
      return new CommonActionSignalRichText(this);
    }

    /// <summary>Field number for the "segments" field.</summary>
    public const int SegmentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AcFunDanmu.CommonActionSignalRichText.Types.RichTextSegment> _repeated_segments_codec
        = pb::FieldCodec.ForMessage(10, global::AcFunDanmu.CommonActionSignalRichText.Types.RichTextSegment.Parser);
    private readonly pbc::RepeatedField<global::AcFunDanmu.CommonActionSignalRichText.Types.RichTextSegment> segments_ = new pbc::RepeatedField<global::AcFunDanmu.CommonActionSignalRichText.Types.RichTextSegment>();
    /// <summary>
    ///segment
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AcFunDanmu.CommonActionSignalRichText.Types.RichTextSegment> Segments {
      get { return segments_; }
    }

    /// <summary>Field number for the "sendTimeMs" field.</summary>
    public const int SendTimeMsFieldNumber = 2;
    private long sendTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendTimeMs {
      get { return sendTimeMs_; }
      set {
        sendTimeMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommonActionSignalRichText);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommonActionSignalRichText other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!segments_.Equals(other.segments_)) return false;
      if (SendTimeMs != other.SendTimeMs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= segments_.GetHashCode();
      if (SendTimeMs != 0L) hash ^= SendTimeMs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      segments_.WriteTo(output, _repeated_segments_codec);
      if (SendTimeMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SendTimeMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      segments_.WriteTo(ref output, _repeated_segments_codec);
      if (SendTimeMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SendTimeMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += segments_.CalculateSize(_repeated_segments_codec);
      if (SendTimeMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendTimeMs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommonActionSignalRichText other) {
      if (other == null) {
        return;
      }
      segments_.Add(other.segments_);
      if (other.SendTimeMs != 0L) {
        SendTimeMs = other.SendTimeMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            segments_.AddEntriesFrom(input, _repeated_segments_codec);
            break;
          }
          case 16: {
            SendTimeMs = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            segments_.AddEntriesFrom(ref input, _repeated_segments_codec);
            break;
          }
          case 16: {
            SendTimeMs = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the CommonActionSignalRichText message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ImageSegment : pb::IMessage<ImageSegment>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ImageSegment> _parser = new pb::MessageParser<ImageSegment>(() => new ImageSegment());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ImageSegment> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AcFunDanmu.CommonActionSignalRichText.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageSegment() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageSegment(ImageSegment other) : this() {
          pictures_ = other.pictures_.Clone();
          alternativeText_ = other.alternativeText_;
          alternativeColor_ = other.alternativeColor_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ImageSegment Clone() {
          return new ImageSegment(this);
        }

        /// <summary>Field number for the "pictures" field.</summary>
        public const int PicturesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::AcFunDanmu.ImageCdnNode> _repeated_pictures_codec
            = pb::FieldCodec.ForMessage(10, global::AcFunDanmu.ImageCdnNode.Parser);
        private readonly pbc::RepeatedField<global::AcFunDanmu.ImageCdnNode> pictures_ = new pbc::RepeatedField<global::AcFunDanmu.ImageCdnNode>();
        /// <summary>
        ///cdnNode
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::AcFunDanmu.ImageCdnNode> Pictures {
          get { return pictures_; }
        }

        /// <summary>Field number for the "alternativeText" field.</summary>
        public const int AlternativeTextFieldNumber = 2;
        private string alternativeText_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AlternativeText {
          get { return alternativeText_; }
          set {
            alternativeText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "alternativeColor" field.</summary>
        public const int AlternativeColorFieldNumber = 3;
        private string alternativeColor_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AlternativeColor {
          get { return alternativeColor_; }
          set {
            alternativeColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ImageSegment);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ImageSegment other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!pictures_.Equals(other.pictures_)) return false;
          if (AlternativeText != other.AlternativeText) return false;
          if (AlternativeColor != other.AlternativeColor) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= pictures_.GetHashCode();
          if (AlternativeText.Length != 0) hash ^= AlternativeText.GetHashCode();
          if (AlternativeColor.Length != 0) hash ^= AlternativeColor.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          pictures_.WriteTo(output, _repeated_pictures_codec);
          if (AlternativeText.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(AlternativeText);
          }
          if (AlternativeColor.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(AlternativeColor);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          pictures_.WriteTo(ref output, _repeated_pictures_codec);
          if (AlternativeText.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(AlternativeText);
          }
          if (AlternativeColor.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(AlternativeColor);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += pictures_.CalculateSize(_repeated_pictures_codec);
          if (AlternativeText.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AlternativeText);
          }
          if (AlternativeColor.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AlternativeColor);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ImageSegment other) {
          if (other == null) {
            return;
          }
          pictures_.Add(other.pictures_);
          if (other.AlternativeText.Length != 0) {
            AlternativeText = other.AlternativeText;
          }
          if (other.AlternativeColor.Length != 0) {
            AlternativeColor = other.AlternativeColor;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                pictures_.AddEntriesFrom(input, _repeated_pictures_codec);
                break;
              }
              case 18: {
                AlternativeText = input.ReadString();
                break;
              }
              case 26: {
                AlternativeColor = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                pictures_.AddEntriesFrom(ref input, _repeated_pictures_codec);
                break;
              }
              case 18: {
                AlternativeText = input.ReadString();
                break;
              }
              case 26: {
                AlternativeColor = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class PlainSegment : pb::IMessage<PlainSegment>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PlainSegment> _parser = new pb::MessageParser<PlainSegment>(() => new PlainSegment());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PlainSegment> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AcFunDanmu.CommonActionSignalRichText.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlainSegment() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlainSegment(PlainSegment other) : this() {
          text_ = other.text_;
          color_ = other.color_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PlainSegment Clone() {
          return new PlainSegment(this);
        }

        /// <summary>Field number for the "text" field.</summary>
        public const int TextFieldNumber = 1;
        private string text_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Text {
          get { return text_; }
          set {
            text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "color" field.</summary>
        public const int ColorFieldNumber = 2;
        private string color_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Color {
          get { return color_; }
          set {
            color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PlainSegment);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PlainSegment other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Text != other.Text) return false;
          if (Color != other.Color) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Text.Length != 0) hash ^= Text.GetHashCode();
          if (Color.Length != 0) hash ^= Color.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Text.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Text);
          }
          if (Color.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Color);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Text.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Text);
          }
          if (Color.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Color);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Text.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
          }
          if (Color.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PlainSegment other) {
          if (other == null) {
            return;
          }
          if (other.Text.Length != 0) {
            Text = other.Text;
          }
          if (other.Color.Length != 0) {
            Color = other.Color;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Text = input.ReadString();
                break;
              }
              case 18: {
                Color = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Text = input.ReadString();
                break;
              }
              case 18: {
                Color = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class RichTextSegment : pb::IMessage<RichTextSegment>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<RichTextSegment> _parser = new pb::MessageParser<RichTextSegment>(() => new RichTextSegment());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RichTextSegment> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AcFunDanmu.CommonActionSignalRichText.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RichTextSegment() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RichTextSegment(RichTextSegment other) : this() {
          switch (other.SegmentCase) {
            case SegmentOneofCase.UserInfo:
              UserInfo = other.UserInfo.Clone();
              break;
            case SegmentOneofCase.Plain:
              Plain = other.Plain.Clone();
              break;
            case SegmentOneofCase.Image:
              Image = other.Image.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RichTextSegment Clone() {
          return new RichTextSegment(this);
        }

        /// <summary>Field number for the "userInfo" field.</summary>
        public const int UserInfoFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AcFunDanmu.CommonActionSignalRichText.Types.UserInfoSegment UserInfo {
          get { return segmentCase_ == SegmentOneofCase.UserInfo ? (global::AcFunDanmu.CommonActionSignalRichText.Types.UserInfoSegment) segment_ : null; }
          set {
            segment_ = value;
            segmentCase_ = value == null ? SegmentOneofCase.None : SegmentOneofCase.UserInfo;
          }
        }

        /// <summary>Field number for the "plain" field.</summary>
        public const int PlainFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AcFunDanmu.CommonActionSignalRichText.Types.PlainSegment Plain {
          get { return segmentCase_ == SegmentOneofCase.Plain ? (global::AcFunDanmu.CommonActionSignalRichText.Types.PlainSegment) segment_ : null; }
          set {
            segment_ = value;
            segmentCase_ = value == null ? SegmentOneofCase.None : SegmentOneofCase.Plain;
          }
        }

        /// <summary>Field number for the "image" field.</summary>
        public const int ImageFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AcFunDanmu.CommonActionSignalRichText.Types.ImageSegment Image {
          get { return segmentCase_ == SegmentOneofCase.Image ? (global::AcFunDanmu.CommonActionSignalRichText.Types.ImageSegment) segment_ : null; }
          set {
            segment_ = value;
            segmentCase_ = value == null ? SegmentOneofCase.None : SegmentOneofCase.Image;
          }
        }

        private object segment_;
        /// <summary>Enum of possible cases for the "segment" oneof.</summary>
        public enum SegmentOneofCase {
          None = 0,
          UserInfo = 1,
          Plain = 2,
          Image = 3,
        }
        private SegmentOneofCase segmentCase_ = SegmentOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SegmentOneofCase SegmentCase {
          get { return segmentCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSegment() {
          segmentCase_ = SegmentOneofCase.None;
          segment_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RichTextSegment);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RichTextSegment other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(UserInfo, other.UserInfo)) return false;
          if (!object.Equals(Plain, other.Plain)) return false;
          if (!object.Equals(Image, other.Image)) return false;
          if (SegmentCase != other.SegmentCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (segmentCase_ == SegmentOneofCase.UserInfo) hash ^= UserInfo.GetHashCode();
          if (segmentCase_ == SegmentOneofCase.Plain) hash ^= Plain.GetHashCode();
          if (segmentCase_ == SegmentOneofCase.Image) hash ^= Image.GetHashCode();
          hash ^= (int) segmentCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (segmentCase_ == SegmentOneofCase.UserInfo) {
            output.WriteRawTag(10);
            output.WriteMessage(UserInfo);
          }
          if (segmentCase_ == SegmentOneofCase.Plain) {
            output.WriteRawTag(18);
            output.WriteMessage(Plain);
          }
          if (segmentCase_ == SegmentOneofCase.Image) {
            output.WriteRawTag(26);
            output.WriteMessage(Image);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (segmentCase_ == SegmentOneofCase.UserInfo) {
            output.WriteRawTag(10);
            output.WriteMessage(UserInfo);
          }
          if (segmentCase_ == SegmentOneofCase.Plain) {
            output.WriteRawTag(18);
            output.WriteMessage(Plain);
          }
          if (segmentCase_ == SegmentOneofCase.Image) {
            output.WriteRawTag(26);
            output.WriteMessage(Image);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (segmentCase_ == SegmentOneofCase.UserInfo) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserInfo);
          }
          if (segmentCase_ == SegmentOneofCase.Plain) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Plain);
          }
          if (segmentCase_ == SegmentOneofCase.Image) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RichTextSegment other) {
          if (other == null) {
            return;
          }
          switch (other.SegmentCase) {
            case SegmentOneofCase.UserInfo:
              if (UserInfo == null) {
                UserInfo = new global::AcFunDanmu.CommonActionSignalRichText.Types.UserInfoSegment();
              }
              UserInfo.MergeFrom(other.UserInfo);
              break;
            case SegmentOneofCase.Plain:
              if (Plain == null) {
                Plain = new global::AcFunDanmu.CommonActionSignalRichText.Types.PlainSegment();
              }
              Plain.MergeFrom(other.Plain);
              break;
            case SegmentOneofCase.Image:
              if (Image == null) {
                Image = new global::AcFunDanmu.CommonActionSignalRichText.Types.ImageSegment();
              }
              Image.MergeFrom(other.Image);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::AcFunDanmu.CommonActionSignalRichText.Types.UserInfoSegment subBuilder = new global::AcFunDanmu.CommonActionSignalRichText.Types.UserInfoSegment();
                if (segmentCase_ == SegmentOneofCase.UserInfo) {
                  subBuilder.MergeFrom(UserInfo);
                }
                input.ReadMessage(subBuilder);
                UserInfo = subBuilder;
                break;
              }
              case 18: {
                global::AcFunDanmu.CommonActionSignalRichText.Types.PlainSegment subBuilder = new global::AcFunDanmu.CommonActionSignalRichText.Types.PlainSegment();
                if (segmentCase_ == SegmentOneofCase.Plain) {
                  subBuilder.MergeFrom(Plain);
                }
                input.ReadMessage(subBuilder);
                Plain = subBuilder;
                break;
              }
              case 26: {
                global::AcFunDanmu.CommonActionSignalRichText.Types.ImageSegment subBuilder = new global::AcFunDanmu.CommonActionSignalRichText.Types.ImageSegment();
                if (segmentCase_ == SegmentOneofCase.Image) {
                  subBuilder.MergeFrom(Image);
                }
                input.ReadMessage(subBuilder);
                Image = subBuilder;
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                global::AcFunDanmu.CommonActionSignalRichText.Types.UserInfoSegment subBuilder = new global::AcFunDanmu.CommonActionSignalRichText.Types.UserInfoSegment();
                if (segmentCase_ == SegmentOneofCase.UserInfo) {
                  subBuilder.MergeFrom(UserInfo);
                }
                input.ReadMessage(subBuilder);
                UserInfo = subBuilder;
                break;
              }
              case 18: {
                global::AcFunDanmu.CommonActionSignalRichText.Types.PlainSegment subBuilder = new global::AcFunDanmu.CommonActionSignalRichText.Types.PlainSegment();
                if (segmentCase_ == SegmentOneofCase.Plain) {
                  subBuilder.MergeFrom(Plain);
                }
                input.ReadMessage(subBuilder);
                Plain = subBuilder;
                break;
              }
              case 26: {
                global::AcFunDanmu.CommonActionSignalRichText.Types.ImageSegment subBuilder = new global::AcFunDanmu.CommonActionSignalRichText.Types.ImageSegment();
                if (segmentCase_ == SegmentOneofCase.Image) {
                  subBuilder.MergeFrom(Image);
                }
                input.ReadMessage(subBuilder);
                Image = subBuilder;
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class UserInfoSegment : pb::IMessage<UserInfoSegment>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<UserInfoSegment> _parser = new pb::MessageParser<UserInfoSegment>(() => new UserInfoSegment());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UserInfoSegment> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AcFunDanmu.CommonActionSignalRichText.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserInfoSegment() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserInfoSegment(UserInfoSegment other) : this() {
          user_ = other.user_ != null ? other.user_.Clone() : null;
          color_ = other.color_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UserInfoSegment Clone() {
          return new UserInfoSegment(this);
        }

        /// <summary>Field number for the "user" field.</summary>
        public const int UserFieldNumber = 1;
        private global::AcFunDanmu.ZtLiveUserInfo user_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AcFunDanmu.ZtLiveUserInfo User {
          get { return user_; }
          set {
            user_ = value;
          }
        }

        /// <summary>Field number for the "color" field.</summary>
        public const int ColorFieldNumber = 2;
        private string color_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Color {
          get { return color_; }
          set {
            color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UserInfoSegment);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UserInfoSegment other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(User, other.User)) return false;
          if (Color != other.Color) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (user_ != null) hash ^= User.GetHashCode();
          if (Color.Length != 0) hash ^= Color.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (user_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(User);
          }
          if (Color.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Color);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (user_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(User);
          }
          if (Color.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Color);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (user_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
          }
          if (Color.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UserInfoSegment other) {
          if (other == null) {
            return;
          }
          if (other.user_ != null) {
            if (user_ == null) {
              User = new global::AcFunDanmu.ZtLiveUserInfo();
            }
            User.MergeFrom(other.User);
          }
          if (other.Color.Length != 0) {
            Color = other.Color;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (user_ == null) {
                  User = new global::AcFunDanmu.ZtLiveUserInfo();
                }
                input.ReadMessage(User);
                break;
              }
              case 18: {
                Color = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (user_ == null) {
                  User = new global::AcFunDanmu.ZtLiveUserInfo();
                }
                input.ReadMessage(User);
                break;
              }
              case 18: {
                Color = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
